<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown语法笔记</title>
      <link href="/2022/02/27/markdown/"/>
      <url>/2022/02/27/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>目前个人博客中写作所使用的较广泛的语言就是markdown</li><li>Markdown是一种轻量级标记语言,Markdown的轻量化、易读易写特性</li></ul><h2 id="Markdown基本用法"><a href="#Markdown基本用法" class="headerlink" title="Markdown基本用法"></a>Markdown基本用法</h2><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">我</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">我</span><span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">我</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">我</span><span class="token punctuation">__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1.第一行  2.第二行  3.第三行  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 第一行  <span class="token list punctuation">-</span> 第二行  <span class="token list punctuation">-</span> 第三行    <span class="token list punctuation">-</span> 嵌套第一行<span class="token list punctuation">-</span> 嵌中嵌<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!--插入图片--&gt;</span><span class="token url"><span class="token operator">!</span>[<span class="token content">网络图片</span>](<span class="token url">https://gitee.com/zhouzejiang/blogimage/raw/master/img/833BAFC4964143BEB14B975D7B0A2380EF8BF5EC</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!--在正文中引用链接标记--&gt;</span>我最喜欢的博客就是周某人<span class="token url">[<span class="token content">周某人的Blog</span>](<span class="token url">https://github.com/ZhouZeJiang</span>)</span><span class="token comment">&lt;!--在底部定义链接标记--&gt;</span>我最喜欢的博客就是[周某人的Blog][周某人的Blog]：https://github.com/ZhouZeJiang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a>网址链接</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;https://www.baidu.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!--行内代码--&gt;</span> <span class="token code-snippet code keyword">`code`</span>    def test_print():        pass<span class="token comment">&lt;!--高亮化--&gt;</span><span class="token code"><span class="token punctuation">```</span><span class="token code-language">python</span><span class="token code-block language-python">def test_print():    pass</span><span class="token punctuation">```</span></span>~<span class="token strike"><span class="token punctuation">~~</span><span class="token content">def test_print():    pass</span><span class="token punctuation">~~</span></span>~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span>6666666<span class="token blockquote punctuation">&gt;&gt;</span>66<span class="token bold"><span class="token punctuation">**</span><span class="token content">66</span><span class="token punctuation">**</span></span>66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">你好啊<span class="token strike"><span class="token punctuation">~~</span><span class="token content">周先生</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">:smile::laughing::+1:<span class="token comment">&lt;!--更多的emoji表情--&gt;</span>&lt;http://www.webpagefx.com/tools/emoji-cheat-sheet/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">|标题|网址||----|:-||博客|https://github.com/ZhouzeJiang|<span class="token comment">&lt;!-- -:右对齐 :-左对齐--&gt;</span><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">标题</span><span class="token punctuation">|</span><span class="token table-header important">网址</span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span><span class="token punctuation">----</span><span class="token punctuation">|</span><span class="token punctuation">----</span><span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data">博客</span><span class="token punctuation">|</span><span class="token table-data">https://github.com/ZhouZeJiang</span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [ ] 吃<span class="token list punctuation">-</span> [x] 喝<span class="token list punctuation">-</span> [x] 玩<span class="token list punctuation">-</span> [ ] 玩电脑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">表格</span>](<span class="token url">#删除线</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">[TOC]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Picgo"><a href="#Picgo" class="headerlink" title="Picgo"></a>Picgo</h2><ul><li><p>可以注意到hexo博客插入图片都是引用图床url的,这里github提供了一个免费开源软件Picgo</p><p>  Picgo:<a href="https://github.com/Molunerfinn/PicGo">Picgo下载</a></p></li><li><p>因为在国内访问gitee速度比github快很多：</p><p>  所以可以在Picgo安装gitee图床插件（插件设置-搜索gitee选其中一个即可）</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301201654617.png"></p><p>  在gitee新建一个仓库blogimage，然后去个人设置中找到私人令牌按如下操作点提交(描述随便填)</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301201941927.png"></p><p>  生成令牌后会获取token复制粘贴到Picgo，其他设置根据第一张图来就行,然后点击确定Picgo图床设置成功</p></li></ul><h2 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h2><ul><li><p>Markdown编辑器我个人主用的是typora,但是目前typora已收费，新用户试用15天：</p><p>  typora:<a href="https://www.typora.net/">typora下载</a></p></li><li><p>Github上也有一个不错的免费开源markdown编辑器：</p><p>  marktext:<a href="https://github.com/marktext/marktext">marktext下载</a></p></li><li><p>使用typora非常方便，typora拥有的快捷键能让工作时间大幅减少,这里主要讲typora插入图片转图床的设置</p><p>  在上述Picgo完成设置后，打开typora-设置-图像</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301203951167.png"></p><p>  按上述配置好,先点击下载或更新,然后验证图片上传选项，成功即可</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> picgo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 常用软件</title>
      <link href="/2022/02/27/windows/"/>
      <url>/2022/02/27/windows/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人常用的一些电脑软件</p><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="录屏软件"><a href="#录屏软件" class="headerlink" title="录屏软件"></a>录屏软件</h3><p>Bandicam</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316021111501.png"></p><p><a href="https://www.bandicam.cn/">高清录屏软件_简单好用的电脑屏幕录像软件 - Bandicam（班迪录屏）官网</a></p><h3 id="压缩包软件"><a href="#压缩包软件" class="headerlink" title="压缩包软件"></a>压缩包软件</h3><p>Bandizip</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316021142334.png"></p><p><a href="https://www.bandisoft.com/bandizip/">Windows 版本的 Bandizip · 业内领先的压缩文件解决方案 (bandisoft.com)</a></p><h3 id="GIF-WebP动图制作-编辑软件"><a href="#GIF-WebP动图制作-编辑软件" class="headerlink" title="GIF/WebP动图制作/编辑软件"></a>GIF/WebP动图制作/编辑软件</h3><p>Honeycam</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316021429058.png"></p><p><a href="https://www.bandisoft.com/honeycam/">免费下载Honeycam · 最为简单易用的 GIF/WebP 动图创软件 (bandisoft.com)</a></p><h3 id="截图软件"><a href="#截图软件" class="headerlink" title="截图软件"></a>截图软件</h3><p>Snipaste</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316021245185.png"></p><p><a href="https://zh.snipaste.com/">Snipaste - 截图 + 贴图</a></p><h3 id="电子书阅读器"><a href="#电子书阅读器" class="headerlink" title="电子书阅读器"></a>电子书阅读器</h3><p>NeatReader</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316021604184.png"></p><p><a href="https://www.neat-reader.cn/">EPUB阅读器 | TXT阅读器 | Neat Reader | 超赞的全平台电子书阅读器，全球百万用户共同的选择 (neat-reader.cn)</a></p><h3 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h3><p>Internet download manager</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316021804403.png"></p><p><a href="https://www.internetdownloadmanager.com/">Internet Download Manager: The fastest download accelerator</a></p><h3 id="图片查看器"><a href="#图片查看器" class="headerlink" title="图片查看器"></a>图片查看器</h3><p>Honeyview</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316021944896.png"></p><p><a href="https://www.bandisoft.com/honeyview/">Honeyview · 蜂蜜浏览器 · 免费的图像查看器 · 下载和功能说明 (bandisoft.com)</a></p><h3 id="文件搜索工具"><a href="#文件搜索工具" class="headerlink" title="文件搜索工具"></a>文件搜索工具</h3><p>Everything</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316023725579.png"></p><p><a href="https://www.voidtools.com/zh-cn/">voidtools</a></p><h3 id="云端笔记"><a href="#云端笔记" class="headerlink" title="云端笔记"></a>云端笔记</h3><p>WizNote</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316034625265.png"></p><p><a href="https://www.wiz.cn/downloads-windows.html">WizNote | 为知笔记 Windows 版</a></p><h3 id="安全防护软件"><a href="#安全防护软件" class="headerlink" title="安全防护软件"></a>安全防护软件</h3><p>火绒安全软件</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316034749409.png"></p><p><a href="https://www.huorong.cn/">火绒安全 (huorong.cn)</a></p><h3 id="视频播放器"><a href="#视频播放器" class="headerlink" title="视频播放器"></a>视频播放器</h3><p>Potplayer</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316034931090.png"></p><p><a href="http://potplayer.tv/">Global Potplayer</a></p><h3 id="图片-视频压缩软件"><a href="#图片-视频压缩软件" class="headerlink" title="图片/视频压缩软件"></a>图片/视频压缩软件</h3><p>嗨格式压缩大师</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316035216833.png"></p><p><a href="https://www.haigeshi.com/yasuo-online-baidu">嗨格式压缩大师_视频压缩软件，免费下载立即使用 (haigeshi.com)</a></p><h3 id="桌面分区软件"><a href="#桌面分区软件" class="headerlink" title="桌面分区软件"></a>桌面分区软件</h3><p>Fence</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316035332858.png"></p><p><a href="https://www.stardock.com/products/fences/download">Download/Purchase Fences 4 : Software from Stardock</a></p><h3 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h3><p>Typora</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220316035804630.png"></p><p><a href="https://typoraio.cn/">Typora 官方中文站 (typoraio.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows10 </tag>
            
            <tag> windows11 </tag>
            
            <tag> software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语法笔记</title>
      <link href="/2022/02/25/C++/"/>
      <url>/2022/02/25/C++/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>是一个整合C++相关书籍以及学习网站所学内容的C++笔记</p><h2 id="C-基本语法"><a href="#C-基本语法" class="headerlink" title="C++基本语法"></a>C++基本语法</h2><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ul><li>int main()描述的是main()和操作系统的接口</li><li>有些编程环境提供的框架程序，该程序调用一些非标准函数，如_tmain()，但实际上还是离不开main()，它有一个隐藏main()，来调用_tmain()</li><li>C++头文件名依旧可以使用C风格，但转换后例如C++版本的math.h为cmath，去掉h不只是形式上的变化，没有h的头文件也可以包含名称空间</li><li>climits文件中定义的两个符号常量（INT_MAX和INT_MIN）来确定其参数是否位于适当的范围内</li></ul><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><ul><li><p>使用的内存量越大，可以表示的范围也越大</p></li><li><p>C++的cout某种程度上比C的printf聪明很多，例如：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会发现错误</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">25</span><span class="token punctuation">;</span><span class="token comment">//成功打印字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>数据类型</strong></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment">// Integer</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span> <span class="token comment">// Unsigned integers only store positive numbers. As a result, they have a higher positive range.</span><span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment">// Character</span><span class="token keyword">short</span> d<span class="token punctuation">;</span> <span class="token comment">// Short integer</span><span class="token keyword">long</span> e<span class="token punctuation">;</span> <span class="token comment">// Long integer</span><span class="token keyword">float</span> f<span class="token punctuation">;</span> <span class="token comment">// Floating point integer</span><span class="token keyword">double</span> g<span class="token punctuation">;</span> <span class="token comment">// Double-precision floating point integer</span><span class="token keyword">bool</span> h<span class="token punctuation">;</span> <span class="token comment">// Boolean TRUE or FALSE</span><span class="token keyword">auto</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Automatically infer type. Not a type in itself.</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>初始化</strong></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// C-like initialization</span><span class="token keyword">int</span> b <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Uniform initialization. Does not allow narrowing conversions.</span><span class="token keyword">int</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Constructor initialization</span><span class="token keyword">char</span> greeting_a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'H'</span><span class="token punctuation">,</span><span class="token char">'e'</span><span class="token punctuation">,</span><span class="token char">'l'</span><span class="token punctuation">,</span><span class="token char">'l'</span><span class="token punctuation">,</span><span class="token char">'o'</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span> greeting_b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string greeting_c <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>存储类说明符</strong></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span> <span class="token comment">// defined elsewhere</span><span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span> <span class="token comment">// hold value between invocations</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>类型限定符</strong></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;atomic&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// a, once defined, is constant and cannot be changed</span>std<span class="token double-colon punctuation">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> b<span class="token punctuation">;</span> <span class="token comment">// b can only be modified by one thread at a time</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// c can be modified externally. the program will check x's value before using it, even if it hasn't been modified locally.</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注释</strong></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * Multi-line comments are written like this. */</span><span class="token comment">// Single-line comments are written like this.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>类型别名</strong></p><p>C++为类型建立别名的方式有两种：</p><p>一种是使用预处理器#define 别名 typename,以下zzz即char的别名</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">zzz</span> <span class="token expression"><span class="token keyword">char</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一种是使用关键字typedef来创建别名typedef typename别名</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">char</span> zzz<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>无符号unsigned + 类型什么时候会用到：确保变量表示的值不可能出现负数，且unsigned所设变量能取更大范围的值</p></li><li><p><strong>字符函数库cctype</strong></p><p>C++从C语言继承了一个与字符相关的、非常方便的函数软件包，它可以简化诸如确定字符是否为大写字母、数字、标点符号等工作</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201011111945286.png"></p></li><li><p>16进制前缀：<code>0x</code>  </p><p>8进制：<code>0 </code></p><p>二进制前缀：<code>0b</code></p></li><li><p><strong>浮点数E表示法</strong>：<code>d.ddE+n </code>小数点向右移n位，<code>d.ddE-n </code>小数点左移n位</p><p>右移:<code>3.45E6=3.45E+6=3.450000</code>  </p><p>左移:<code>3.45E-2=0.0345</code></p><p>浮点常量F/f表示float，E/e表示double，L/l表示long double</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.45E+22f</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">0.1f</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">-</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出J结果是0</p><p><code>因为2.34E+22f是在第23位加上1 ，但float只能表示数字中的前6位或前七位</code></p><p><strong>浮点数与整数相比</strong></p><p>优点：浮点数能表示整数，能表示范围大</p><p>缺点：浮点数运算速度通常比整数慢，且精度降低</p></li><li><p>C++的cout.setf()函数：<a href="https://blog.csdn.net/baishuiniyaonulia/article/details/79144033">C++ 中的 cout.setf() 函数_白水的博客-CSDN博客_cout.setf()</a></p></li><li><p>类型转换潜在的数值转换问题</p><ul><li><p>将较大的浮点类型转换为较小的浮点类型例如double的2111222333转换为float，精度有效数位降低，四舍五入为2.11122E9</p></li><li><p>将浮点数类型转换为整型=&gt;小数部分丢失，原来的值可能类型的取值范围，在这种情况下，结果将是不确定的</p></li><li><p>将较大的整型转换为较小的整型，如long转换为short，原来的值可能超出目标类型的取值范围，通常只复制右边的字节</p></li><li><p>一种严格的类型转换<code>static_cast&lt;&gt;</code></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>结果输出为97</code></p></li></ul></li><li><p>C++11的auto关键字</p><p>简单概括来说auto的自动类型推断发生在编译期，所以使用auto并不会造成程序运行时效率的降低。</p><p>1.auto声明的变量必须必须要初始化，否则编译器不能判断变量的类型</p><p>2.auto不能被声明为返回值，auto不能作为形参，auto不能被修饰为模板参数</p><p>这里举个简单的例子</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">auto</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>输出结果为int</code></p><p>详细参考<a href="https://blog.csdn.net/qq_31930499/article/details/79948906">c++ auto关键字使用_年轻气盛 温顺尚早-CSDN博客_c++auto</a></p></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="定长数组"><a href="#定长数组" class="headerlink" title="定长数组"></a>定长数组</h4><p>四种赋值方式</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但这种是绝不允许的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数组初始化为0</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中列表初始化禁止缩窄转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">25</span>，<span class="token number">92</span>，<span class="token number">3.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//浮点数转整型为缩窄操作</span><span class="token keyword">char</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">'h'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">,</span><span class="token number">121212</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//121212显然超出了char变量的取值范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>字符串读入到char数组中末尾会加n个’\0’元素补充数组长度</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//内存分配则为a b c \0 \0 \0 \0 \0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘ ‘和“ ”的区别</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> cue <span class="token operator">=</span> <span class="token char">'s'</span><span class="token punctuation">;</span><span class="token comment">//字符常量赋值给cue</span><span class="token keyword">char</span> cue <span class="token operator">=</span> <span class="token string">"s"</span><span class="token punctuation">;</span><span class="token comment">//s和\0组成的字符串，实际上表示的是字符串所在内存地址，不能直接赋值给cue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拼接字符串常量，第一个字符串末尾的\0字符会被第二个字符串的首字符代替</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span><span class="token string">"2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>输出结果为12</code></p><h4 id="字符串输入的一个坑"><a href="#字符串输入的一个坑" class="headerlink" title="字符串输入的一个坑"></a><strong>字符串输入的一个坑</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> classes<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your name:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your class"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> classes<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n classes:"</span> <span class="token operator">&lt;&lt;</span> classes<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220303153230969.png" alt="image-20220303153230969"></p><p> cin把zhoumouren作为第一个字符串，并把它放到name数组，这时把two留在输入队列中，之后cin在输入搜索classes时发现了two，因此直接放入了classes数组之中</p><p>这时候可以引入cin.getline(name,size)，很好的解决了第七的问题，字符的最后位位‘\0’，故最多读取size-1个字符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> classes<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your name:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your class:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n classes:"</span> <span class="token operator">&lt;&lt;</span> classes<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304000927715.png"></p><p>面向行的输入还有cin.get()，但是不能像cin.getline一样直接操作，因为get(name,size)会读取不会丢弃换行符，会将换行符保留在输入序列中，而getline(name,size)会直接丢弃换行符，出现    <code>幻影换行符</code>的问题故想要和getline效果一样，需要以这种形式操作：cin.get(name,size).get()</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> classes<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your name:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your class:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n classes:"</span> <span class="token operator">&lt;&lt;</span> classes<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304000927715.png"></p><p>还有另外一种<code>幻影换行符</code>的例子，混合输入字符串和数字会出现的问题</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token keyword">char</span> classes<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your year:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>year<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your class:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span>year <span class="token operator">&lt;&lt;</span> <span class="token string">"\n classes:"</span> <span class="token operator">&lt;&lt;</span> classes<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304001527750.png"></p><p>因为这时候cin&gt;&gt;year会将换行符同样留在输入流中，只要在后面cin.get()或者将cin&gt;&gt;year改成(cin&gt;&gt;year).get()即可</p><h4 id="数组的替代品"><a href="#数组的替代品" class="headerlink" title="数组的替代品"></a><strong>数组的替代品</strong></h4><p><strong>模板类vector</strong></p><p>模板类vector类似于string类，也是一种动态数组。是由C++98新增的标准模板库（STL）提供的。您在运行阶段设置vector对象的长度，可在末尾添加新数据，还可在中间插入新数据。实际上vector类确实使用new和delete来管理内存，但这种工作是自动完成的。使用时需要包含头文件vector。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>模板类array（C++11）</strong></p><p>vector类的功能比数组强大，但付出的代价是效率稍低。如果你需要的是长度固定的数组<br>，使用数组是更佳的选择，但代价是不那么方便和安全。故C++11新增了模板类array，它也位于名称空间std中。array对象的长度是固定的，是使用栈存储的，因此效率和数组相同，更方便，更安全。使用时需要包含头文件array。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//array&lt;typename,n_elem&gt; a=&gt;typename指变量类型，a指数组名称，n_elem表示大小</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是可行的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> d<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>d <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308003622889.png"></p><p><strong>非法索引</strong></p><p>与C语言一样，C++也不检查这种超界错误</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">double</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308004152237.png"></p><p>可以用vector和array对象函数at()在运行期间来捕获这些非法索引，而这种检查的代价是运行时间更长，但好处在于降低意外越界错误的概率（目前VS2022在使用了模板类array和vector，不加at也会抛出异常）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308004551157.png"></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>i++：先取值再加1<br>++i：先加1再取值<br>i- - ：先取值再减1<br>- -i ：先减1再取值</p><p><strong>for循环</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//循环体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>for可以是空表达式，而while不行，这里for表示的空表达式是无限循环</code></p><p><strong>while循环</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//循环体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>do while循环</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token comment">//i++,循环体</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i=31 循环中断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>size_t</strong></p><p>参考<a href="https://blog.csdn.net/qq_41598072/article/details/84924997">AplusX</a></p><p>在32位架构中被普遍定义为：</p><p>typedef  unsigned int size_t;</p><p>而在64位架构中被定义为：</p><p>typedef  unsigned long size_t;</p><p>为什么有时候不用int，而是用size_type或者size_t</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">与<span class="token keyword">int</span>固定四个字节不同有所不同<span class="token punctuation">,</span>size_t的取值range是目标平台下最大可能的数组尺寸<span class="token punctuation">,</span>一些平台下size_t的范围小于<span class="token keyword">int</span>的正数范围<span class="token punctuation">,</span>又或者大于<span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">.</span> 使用Int既有可能浪费，又有可能范围不够大<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>对int类型数组遍历</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> my_array<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> my_array<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>my_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> my_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220312220133095.png"></p><p><strong>对容器的遍历</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> length<span class="token operator">&gt;</span> arr<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> arr<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308184305010.png"></p><p><strong>对列表的遍历</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308184554900.png"></p><p><strong>修改数组元素</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> length<span class="token operator">&gt;</span> arr<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span>x <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件尾条件</strong></p><p>EOF：一种功能强大的技术，且是在文件iostream中定义的<br>很多PC编程环境都将ctrl+z视为模拟的EOF<br>举个例子cin.eof()</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> ch<span class="token punctuation">;</span><span class="token operator">++</span>count<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">"characters read\n"</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308201823128.png" alt="其中enter字符也被纳入计数"></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308201849624.png"></p><p>还可以这样</p><p><img src="https://img-blog.csdnimg.cn/20201010161332689.png#pic_center"></p><p>或是这样</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201010161402919.png"><br>最后一种会更通用，因为它可以检测到其他失败原因，如磁盘故障<br>精简后为</p><p><img src="https://img-blog.csdnimg.cn/20201010162403986.png#pic_center"></p><h3 id="分支语句与逻辑运算符"><a href="#分支语句与逻辑运算符" class="headerlink" title="分支语句与逻辑运算符"></a>分支语句与逻辑运算符</h3><h4 id="if…else-语句和逻辑运算符"><a href="#if…else-语句和逻辑运算符" class="headerlink" title="if…else 语句和逻辑运算符"></a>if…else 语句和逻辑运算符</h4><p>if and if…else结构<br>if… else if… else结构<br>逻辑运算符or&lt;=&gt;||<br>逻辑运算符AND&lt;=&gt;&amp;&amp;<br>逻辑运算符NOT&lt;=&gt;!</p><ul><li><p>?:运算符：条件运算符，它是C++中唯一需要3个操作数的运算符</p><p>  <strong>expression1 ? expression2 :expression3</strong><br>  如果expression1 为true，则整个条件表达式的值为expression2的值，否则整个表达式的值为expression3的值</p></li></ul><h4 id="switch…case语句"><a href="#switch…case语句" class="headerlink" title="switch…case语句"></a><strong>switch…case语句</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">spectrum</span><span class="token punctuation">{</span>red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>blue<span class="token punctuation">,</span>green<span class="token punctuation">}</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> choice<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> red<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"is red"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> blue<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"is blue"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> green<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"is green"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no red blue green"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220309003342175.png"></p><p>switch和if else</p><ul><li>switch中case的值必须是整数（包括char），因此switch无法处理浮点数，如果是涉及取值范围、浮点测试或两个变量的比较，则应使用if else语句。</li><li>如果所有的选项都可以使用整数常量来标识，则可以优先使用switch语句，因为如果选项超过两个，则就代码长度和执行速度而言，switch语句的效率更高</li></ul><h4 id="break-continue-goto"><a href="#break-continue-goto" class="headerlink" title="break continue goto"></a>break continue goto</h4><p>break：打破循环<br>continue：跳过该轮循环<br>goto↓</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">goto</span> zhoumouren<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> zhoumouren<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单文本文件输入输出"><a href="#简单文本文件输入输出" class="headerlink" title="简单文本文件输入输出"></a>简单文本文件输入输出</h3><h4 id="写入文本文件"><a href="#写入文本文件" class="headerlink" title="写入文本文件"></a>写入文本文件</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ofstream outfile<span class="token punctuation">;</span>outfile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"D:\\Learning\\C++_learning\\zhoumouren.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outfile <span class="token operator">&lt;&lt;</span> <span class="token string">"zhoumouren"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>outfile <span class="token operator">&lt;&lt;</span> <span class="token string">"666666"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>outfile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220309011923021.png"></p><h4 id="读取文本文件"><a href="#读取文本文件" class="headerlink" title="读取文本文件"></a>读取文本文件</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ifstream infile<span class="token punctuation">;</span>infile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"D:\\Learning\\C++_learning\\zhoumouren.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string value<span class="token punctuation">;</span><span class="token comment">//inFile.eof():判断是否到达EOF</span><span class="token comment">//inFile.fail() :可以用于检查EOF和类型不匹配</span><span class="token comment">//inFile.good() :指出最后一次读取输入的操作是否成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>infile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>infile<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>infile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220309011845059.png"></p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string对象和字符数组之间的主要区别是可以将string对象声明为简单变量，而不是数组，且类设计能让程序自动处理string的大小，这使得与使用字符数组相比，使用string对象更方便，更安全。从理论上来说，可以将char数组视为一组用于存储一个字符串的char存储单元，而string类变量是一个表示字符串的实体。</p><h4 id="string的赋值、拼接和附加"><a href="#string的赋值、拼接和附加" class="headerlink" title="string的赋值、拼接和附加"></a>string的赋值、拼接和附加</h4><ul><li><p>赋值</p><p>  不能将一个数组赋给另一个数组，但可以将一个string对象赋给另一个string对象</p></li><li><p>拼接和附加</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string a <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>string b <span class="token operator">=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>string c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304165705146.png"></p></li></ul><h4 id="输出带引号的字符串"><a href="#输出带引号的字符串" class="headerlink" title="输出带引号的字符串"></a><strong>输出带引号的字符串</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\"aaa\""</span><span class="token punctuation">;</span> <span class="token comment">//第一种方式</span>cout <span class="token operator">&lt;&lt;</span> <span class="token raw-string string">R"("aaa")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//第二种方式</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304170137383.png"></p><p><strong>但是原始字符串中若有括号()，则需要使用另一种方式替代默认定界符“（和）”</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token raw-string string">R"+*(aaa "(bbb)" cccc)+*"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304170849987.png"></p><h4 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a><strong>字符串长度</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string a <span class="token operator">=</span> <span class="token string">"bbb"</span><span class="token punctuation">;</span><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"cc"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>endl <span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304171713523.png"></p><h4 id="string的输入方法"><a href="#string的输入方法" class="headerlink" title="string的输入方法"></a><strong>string的输入方法</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span><span class="token comment">//第一种</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>C++ OOP类的基石就是结构</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201006115129590.png"></p><p><strong>C++11结构初始化、赋值、结构声明、结构数组</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">oneman</span><span class="token punctuation">{</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span>c<span class="token punctuation">;</span><span class="token comment">//结构声明</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>oneman a<span class="token punctuation">{</span> <span class="token string">"zhoumouren"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>oneman b<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//默认初始化</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//赋值</span>c <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//赋值</span>oneman d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token string">"zhou"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"mou"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//结构数组</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304174036447.png"></p><h3 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h3><p>union是一种特殊的数据类型，可以在同一内存位置存储不同的数据类型。可以定义具有多个成员的union，但在任何给定时间，只有一个成员可以包含值。union提供了一种将同一内存位置用于多种目的的有效方法。union的大小将是最大组成类型的大小。可以参考<a href="https://www.runoob.com/cprogramming/c-unions.html">C 共用体 | 菜鸟教程 (runoob.com)</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">union</span> my_data <span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">float</span> f<span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">union</span> my_data object1<span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size of my_data union: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220312231535081.png"></p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>定义枚举类型的主要目的是：增加程序的可读性。枚举类型最常见也最有意义的用处之一就是用来描述状态量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token class-name">zhoumouren</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g<span class="token punctuation">,</span>h<span class="token punctuation">}</span><span class="token punctuation">;</span>zhoumouren zmr <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//不初始化也行</span>zmr <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//zmr = 2;not valid</span><span class="token comment">//zmr++;not valid</span><span class="token comment">//zmr = a+b;not valid</span><span class="token keyword">int</span> num <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//valid</span>zmr <span class="token operator">=</span> <span class="token function">zhoumouren</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//valid</span>zmr <span class="token operator">=</span> <span class="token function">zhoumouren</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//虽然有输出,但这么写不合适</span><span class="token keyword">enum</span> <span class="token class-name">bits</span><span class="token punctuation">{</span>one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>two<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>four<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>eight<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//显示设置枚举量的值</span><span class="token keyword">enum</span> <span class="token class-name">bigstep</span><span class="token punctuation">{</span>first<span class="token punctuation">,</span>second<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>third<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//first在默认情况下为0,后面的third没被初始化,比前面的枚举量大1，为101</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>zero<span class="token punctuation">,</span>null <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>one<span class="token punctuation">,</span>numero_uno<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//zero和null都为0,one和umero_uno都为1</span>cout <span class="token operator">&lt;&lt;</span> zmr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++早期版本中,只能将int值赋给枚举量,但是后来这种限制取消了,因此可以使用long甚至long long类型的值</p><p>枚举的取值范围:拿<code>bigstep</code>举例,最大值(最小值)都得看大于(小于)这个最大枚举量(最小枚举量)的2的幂,例如third为101,即看<code>2的七次方将它减去1就是这个枚举的上限127</code>.同理<code>下限一般为0</code>.若最小枚举量为-6,则把他看成正数6,操作和上面步骤一样最后再取个负号就是-7</p><p>一般选择多少空间来存储枚举由编译器决定,对于取值范围小的枚举使用一个字节或更少的空间,而对于包含long类型值的枚举,则使用4个字节</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针和自由存储空间</p><p>指针策略是C++内存管理变成理念的核心</p><h4 id="指针和C-基本原理"><a href="#指针和C-基本原理" class="headerlink" title="指针和C++基本原理"></a><strong>指针和C++基本原理</strong></h4><p>C++编译过程:预处理、编译、汇编、链接成可执行文件(window下为.exe)</p><p>OOP（Object Oriented Programming）编程与传统编程区别:OOP强调运行阶段而不是编译阶段。传统编译过程需要指定数组长度，如果要分配200个元素的空间，如果你只用到其中20个元素的空间，如果编译阶段进行决策那么就确定是需要200个元素的空间，如果你只用到其中20个元素的空间，这就是在浪费内存，所以OOP通过运行阶段决策可以灵活告诉程序只需要用到20个元素的空间。这里采用的方法是<code>使用关键字new请求正确数量的内存以及使用指针来跟踪新分配的内存的位置</code></p><ul><li>在运行阶段做决策并非OOP独有的，但使用C++编写这样的代码比C语言更简单</li><li>*运算符被称为间接值或解除引用运算符</li></ul><p><strong>初始化</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> zmr <span class="token operator">=</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span><span class="token comment">//第一种初始化方法</span><span class="token keyword">int</span><span class="token operator">*</span> zt<span class="token punctuation">;</span>zt <span class="token operator">=</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span><span class="token comment">//第二种初始化方法</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address:"</span> <span class="token operator">&lt;&lt;</span> zmr <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"value:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>zmr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address:"</span> <span class="token operator">&lt;&lt;</span> zt <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"value:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>zt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指针的危险"><a href="#指针的危险" class="headerlink" title="指针的危险"></a><strong>指针的危险</strong></h4><p>​    <code>*pointer_values=3333;</code></p><p>没有表明地址，指针不一定指向存储3333的地址，这种错误会导致一些最隐匿、最难以跟踪的bug，所以程序会报出异常。</p><p>指针和数字</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pointer_updates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xB8000000</span><span class="token punctuation">;</span><span class="token comment">//第一种</span><span class="token comment">//pointer_updates = 0xB8000000;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>C99标准发布之前，第二种C语言是允许这样赋值，但C++会有异常，因为C++类型一致方面要求比较严格，应通过强制转换类型将数字转换为适当的地址类型（第一种）</p><h4 id="使用new-delete来分配和删除内存"><a href="#使用new-delete来分配和删除内存" class="headerlink" title="使用new/delete来分配和删除内存"></a><strong>使用new/delete来分配和删除内存</strong></h4><p>指针真正的用武之地是可以在运行阶段分配未命名的内存以存储值</p><p>new int告诉程序，需要适合存储int的内存。new运算符根据类型来确定需要多少字节的内存。然后它找到这样的内存，并返回其地址</p><ul><li><p>对于指针需要指出的另一点是：<strong>new分配的内存块</strong>通常与<strong>常规变量声明分配的内存块</strong>不同，像values这些的值都存储在栈（stack）的内存区域中，而new在被称为堆（heap）或自由存储区（free store）的内存区域分配内存</p></li><li><p>计算机可能会由于没有足够的内存而无法满足new的请求。C++提供了检测并处理内存分配失败的工具</p></li></ul><p>使用delete释放内存</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>new_pointer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token operator">*</span>new_pointer <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">delete</span> new_pointer<span class="token punctuation">;</span><span class="token comment">//仅仅释放new_pointer指向的内存，但不会删除指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要注意的是一定要配对的使用new和delete；不然可能发生内存泄漏（memory leak），被分配的内存再也无法使用了，如果内存泄漏严重，程序会因不断寻找更多内存而终止。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span> new_pointer<span class="token punctuation">;</span><span class="token keyword">delete</span> new_pointer<span class="token punctuation">;</span><span class="token comment">//not valid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>delete只能释放使用new分配内存</p><p><strong>使用new来创建动态数组，使用delete[]来删除动态数组</strong></p><p>在编译时给数组分配内存被称为<strong>静态联编</strong>（static binding），意味着数组是在编译时加入到程序中的。但使用new时，如果在运行阶段需要数组，则创建它；如果不需要，则不创建，还可以在程序运行时选择数组的长度。这被称为<strong>动态联编</strong>（dynamic binding）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token operator">*</span> new_pointer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建一个包含10个int元素的数组</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>new_pointer<span class="token punctuation">;</span><span class="token comment">//动态删除数组</span><span class="token keyword">int</span><span class="token operator">*</span> ze<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">delete</span> ze<span class="token punctuation">;</span><span class="token comment">//对空指针应用delete是安全的</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用动态数组"><a href="#使用动态数组" class="headerlink" title="使用动态数组"></a><strong>使用动态数组</strong></h4><p>*(new_pointer+1)等价于new_pointer[1]，相邻的int地址通常相差2个字节或4个字节，所以说指针算术是一个神奇的东西，比如*new_pointer指向一个数组</p><p><code>    int old_array[3]={10,2,3};</code></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201007230134651.png"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> x_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of x_ptr = "</span> <span class="token operator">&lt;&lt;</span> x_ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of x_ptr + 1 = "</span> <span class="token operator">&lt;&lt;</span> x_ptr <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">char</span> y<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> y_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of y_ptr = "</span> <span class="token operator">&lt;&lt;</span> y_ptr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Value of y_ptr + 1 = "</span> <span class="token operator">&lt;&lt;</span> y_ptr <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Output<span class="token operator">:</span> Value of x_ptr <span class="token operator">=</span> <span class="token number">492316</span>        Value of x_ptr <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">492320</span>        Value of y_ptr <span class="token operator">=</span> <span class="token number">492303</span>        Value of y_ptr <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">492304</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指针和字符串"><a href="#指针和字符串" class="headerlink" title="指针和字符串"></a><strong>指针和字符串</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token string">"aaa"</span><span class="token punctuation">;</span><span class="token comment">//字符串内存地址" "</span>cout <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出字符串</span>cout <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出字符串地址</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>独立副本</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> animal<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> q<span class="token punctuation">;</span>q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>q <span class="token operator">=</span> animal<span class="token punctuation">;</span><span class="token comment">//第一种，修改存储p的地址，使其指向animal</span><span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种，第一个参数表示目标地址</span><span class="token comment">//所以分配了目标地址，p和animal互为独立的副本</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>animal <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>q <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动存储、静态存储、动态存储"><a href="#自动存储、静态存储、动态存储" class="headerlink" title="自动存储、静态存储、动态存储"></a><strong>自动存储、静态存储、动态存储</strong></h4><p><strong>自动存储</strong></p><p>函数内部定义的常规变量使用自动存储空间，被称为自动变量。在所属函数被调用时自动产生，在该函数结束时消亡</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">" at"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>name<span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">" at"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>name<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter last name:"</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> temp<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy_s</span><span class="token punctuation">(</span>pn<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> pn<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220307180012705.png"></p><p>从上图看，其实C++不保证新释放的内存就是下一次使用new时选择的内存，自动变量通常存储在栈中</p><p><strong>静态存储</strong></p><p>静态存储是整个程序执行期间都存在的存储方式。使变量成为静态的方式有两种：一种是在函数外面定义这个变量，另一种是在声明变量时使用关键字static</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201008102156738.png"></p><p>自动存储和静态存储的关键在于：这些方法严格的限制了变量的寿命<br>变量可能存在于程序的整个生命周期（静态变量），也可能只是在特定函数被执行时存在（自动变量）</p><p><strong>动态存储</strong></p><p>new和delete运算符提供了一种比自动变量和静态变量更灵活的方法。他们可以管理一个内存池，这在C++中被称为自由存储区（free store）或堆（heap）。new和delete让你能够在一个函数中分配内存，而在另一个函数释放它，因此数据的生命周期不完全受程序或函数的生存时间控制。使用new和delete让程序员对程序如何使用内存有更大的控制权。</p><h4 id="类型组合"><a href="#类型组合" class="headerlink" title="类型组合"></a><strong>类型组合</strong></h4><p>数组+结构+指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">oneman</span><span class="token punctuation">{</span><span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>oneman a<span class="token punctuation">;</span>oneman<span class="token operator">*</span> aa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>aa<span class="token operator">-&gt;</span>year <span class="token operator">=</span> <span class="token number">1999</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>aa<span class="token punctuation">)</span><span class="token punctuation">.</span>year <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>oneman b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>year <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220307201239288.png"></p><h4 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a><strong>指针和const</strong></h4><p>可以使用两种不同的方式将const关键字用于指针</p><ul><li>让指针指向一个常量对象，防止使用该指针来修改所指向的值<strong>（值不变）</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pointer <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>pointer<span class="token punctuation">;</span><span class="token comment">//*pt = 30;这样是错误的，不能动指针</span>pointer <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310152419990.png"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pointer <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>pointer<span class="token punctuation">;</span>pointer <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>pt <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310152543512.png"></p><p>​    不能像以下这么赋值</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201013212824682.png"></p><p>​    可以将const变量的地址赋给指向const的指针，但不能将const的地址赋给常规指针</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/2020101409003777.png"></p><p>C++禁止这种行为，其实原因很简单，如果可以将nocon的地址赋给q，则可以用q来修改nocon的值，这使得nocon的const状态很荒谬，因此C++禁止将const的地址赋给非const指针，但是可以使用强制类型转换来突破这种限制</p><ul><li>将指针本身声明为常量，这样可以防止改变指针指向的位置<strong>（地址不变）</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pointer <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>pointer<span class="token punctuation">;</span><span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment">/*    int p = 15;    pt = &amp;p;    invalid     */</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310153141930.png"></p><p><strong>将指针参数声明为指向常量数据的指针有两条理由</strong>：<br>1.这样可以避免由于无意间修改数据而导致的编程错误<br>2.使用const使得函数能够处理const和非const实参，否则将只能接受非const数据<br>如果条件允许，则应将指针形参声明为指向const的指针</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="解决经典按值传递的例子"><a href="#解决经典按值传递的例子" class="headerlink" title="解决经典按值传递的例子"></a>解决经典<strong>按值传递</strong>的例子</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token operator">*</span>y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数和二维数组"><a href="#函数和二维数组" class="headerlink" title="函数和二维数组"></a>函数和二维数组</h4><p><strong>函数原型定义</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>ar2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第一种指针参数的声明表示由4个指向int的指针组成的数组</strong>，而不是由一个指向由4个int组成的数组的指针;第二种格式和第一种原型的含义完全相同，但可读性更强</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201014104908289.png"></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201014105812628.png"></p><h4 id="函数与array对象"><a href="#函数与array对象" class="headerlink" title="函数与array对象"></a><strong>函数与array对象</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Seasons <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">const</span> array<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span> Snames <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Spring"</span><span class="token punctuation">,</span><span class="token string">"Summer"</span><span class="token punctuation">,</span><span class="token string">"Fall"</span><span class="token punctuation">,</span><span class="token string">"Winter"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span><span class="token operator">*</span> pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span> da<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span> expenses<span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>expenses<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span>expenses<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span><span class="token operator">*</span> pa<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Seasons<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter:"</span> <span class="token operator">&lt;&lt;</span> Snames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"expenses:"</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span> da<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\nEXPENSES\n"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Seasons<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> Snames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":$"</span> <span class="token operator">&lt;&lt;</span> da<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>total <span class="token operator">+=</span> da<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Total Expenses:$"</span> <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310160432370.png"></p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a><strong>递归</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Counting down..."</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">countdown</span><span class="token punctuation">(</span>n<span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">":Kaboom! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以把它理解成函数栈，递归中countdown(0)是栈顶先弹出，以此类推</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310161042805.png"></p><p><strong>递归-分治法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Len <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Divs <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">subdivide</span><span class="token punctuation">(</span><span class="token keyword">char</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> ruler<span class="token punctuation">[</span>Len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>ruler<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>ruler<span class="token punctuation">[</span>Len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> Len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ruler<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> ruler<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'|'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ruler <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Divs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">subdivide</span><span class="token punctuation">(</span>ruler<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ruler <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>ruler<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">subdivide</span><span class="token punctuation">(</span><span class="token keyword">char</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>ar<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'|'</span><span class="token punctuation">;</span><span class="token function">subdivide</span><span class="token punctuation">(</span>ar<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subdivide</span><span class="token punctuation">(</span>ar<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">,</span> level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310162653952.png"></p><h4 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a><strong>函数指针</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(*pf)是函数，pf是函数指针，表示pf是一个指向函数的指针</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token function">pf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//而他表示pf是一个返回指针的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>正确声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">pam</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> pam<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>错误声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">ned</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">ted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> ned<span class="token punctuation">;</span><span class="token comment">//invalid</span>pf <span class="token operator">=</span> ted<span class="token punctuation">;</span><span class="token comment">//invalid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数指针示例</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/2020101710540921.png"></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/2020101710543839.png"></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310163703383.png"></p><p><strong>深入探讨函数指针</strong></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201017105956894.png"></p><p>这些函数的特征标看似不同，但实际上相同</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201017110603216.png"></p><p>使用C++的自动类型推断功能时，代码要简单的多</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> p2 <span class="token operator">=</span> f2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以声明包含三个函数指针的数组</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201017110954639.png"></p><p>依然可以使用auto</p><h4 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a><strong>内联函数</strong></h4><p>内联函数是C++为<strong>提高程序运行速度</strong>所做的一项改进。C++内联函数的编译代码与其他程序代码“内联”起来了。也就是说，编译器将使用相应的函数代码替换函数调用。对于内联代码，程序无需跳到另一个位置处执行代码，再跳回来。因此，内联函数的运行速度比常规函数稍快，但<strong>代价是需要占用更多的内存</strong>，如果程序在10个不同的地方调用同一个内联函数，则该程序将包含该函数代码的10个副本</p><p>要使用这项特性，必须采取下述措施：</p><ul><li>在函数声明前加上关键字inline；</li><li>在函数定义前加上关键字inline。</li></ul><p>程序员请求将函数作为内联函数时，编译器不一定会满足这种要求。它可能认为该函数过大或注意到函数调用了自己（内联函数不能递归），因此不能将其作为内联函数；而有些编译器没有启用或实现这种特性。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310165907259.png"></p><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a><strong>默认参数</strong></h4><p>对参数添加默认值必须从右向左</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">harpo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//valid</span><span class="token keyword">int</span> <span class="token function">chico</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//invalid</span><span class="token keyword">int</span> <span class="token function">groucho</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//valid</span>beeps <span class="token operator">=</span> <span class="token function">harpo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//same as harpo(2,4,5)</span>beeps <span class="token operator">=</span> <span class="token function">harpo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// same as harpo(1,8,5)</span>beeps <span class="token operator">=</span> <span class="token function">harpo</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// no default arguments used</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a><strong>函数重载</strong></h4><p>术语”多态”指的是有多种形态<br>术语“函数重载”指的是可以有多个同名的函数，我们通常使用函数重载来设计一系列函数-它们完成相同的工作，但使用不同的参数列表</p><p>函数重载的关键是函数的参数列表-也成为函数特征标（function signature），如果两个函数的参数数目和类型相同，同时参数的排列顺序也相同，则它们的特征标相同，而变量名是无关紧要的，C++允许定义名称相同的函数，条件是他们的特征标不同。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token punctuation">,</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">double</span> bd<span class="token punctuation">,</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用print()函数时，编译器将根据所采取的用法使用有相应的特征标的原型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//use #1</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//use #5</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1999.0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//use #2</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//use #4</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1999L</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//use #3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但对于下面语句</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">3210</span><span class="token punctuation">;</span><span class="token function">print</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>print()不与任何原型匹配，但C++会尝试使用标准类型转换强制进行匹配，但上述代码中，有三个将数字作为第一个参数的原型，因此有3种转换year的方式.在这种情况下,C++将拒绝这种调用，并将其视为错误</p><p>一些看起来彼此不同的特征标是不能共存的。例如请看下面的两个原型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">cube</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">cube</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数x与double x原型和double &amp;x原型都匹配，因此编译器无法确定究竟应使用哪个原型。为避免这种混乱，编译器在检查函数特征标时，将把类型引用和类型本身视为同一个特征标，所以不会报错</p><p>继续看下面的原型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dribble</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> bits<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dribble</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cbits<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dabble</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>bits<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">drivel</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>bits<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面列出了各种函数调用对应的原型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> p1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"aaa"</span><span class="token punctuation">;</span><span class="token keyword">char</span> pw<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bbb"</span><span class="token punctuation">;</span><span class="token function">dribble</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dribble(const char *);</span><span class="token function">dribble</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dribble(char *);</span><span class="token function">dabble</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// no match </span><span class="token function">dabble</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//dabble(char *);</span><span class="token function">drivel</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// drivel(const char *);</span><span class="token function">drivel</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// drivel(const char *);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面两个声明是互斥的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token function">gronk</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">float</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">gronk</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">float</span> m<span class="token punctuation">)</span><span class="token operator">:</span><span class="token comment">//not allowed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因此，C++不允许以这种方式重载gronk().返回类型可以不同，但特征标也必须不同</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token function">gronk</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">float</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">gronk</span><span class="token punctuation">(</span><span class="token keyword">float</span> n<span class="token punctuation">,</span><span class="token keyword">float</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hence allowed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重载引用参数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// matches modifiable lvalue</span><span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> <span class="token operator">&amp;</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// matches modifiable or const lvalue,rvalue</span><span class="token keyword">void</span> <span class="token function">sink</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">&amp;&amp;</span>r3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//matches rvalue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">55.5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token number">30.5</span><span class="token punctuation">;</span><span class="token function">sink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sink(double &amp;)</span><span class="token function">sink</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sink(const double &amp;)</span><span class="token function">sink</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sink(double &amp;&amp;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>何时使用函数重载</strong></p><p>虽然函数重载很吸引人，但也不要滥用。仅当函数基本上执行相同的任务，但使用不同形式的数据时，才应采用函数重载。</p><h4 id="名称修饰"><a href="#名称修饰" class="headerlink" title="名称修饰"></a>名称修饰</h4><p>C++如何跟踪每一个重载函数呢？它给这些函数指定了秘密身份。使用C++开发工具中的编辑器编写和编译程序，C++编译器将执行一些神奇的操作-名称修饰（name decoration）或名称矫正（name mangling)，它根据函数原型中指定的形参类型对每个函数名进行加密。请看下述未经修饰的函数原型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token function">MyFunctionFoo</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种格式对于人类来说很适合；我们知道函数接受两个参数（一个为int类型，另一个为float类型），并返回一个long值。而编译器将名称转换为不太好看的内部表示，来描述该接口，如下所示</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">?</span>MyFunctionFoo@@YAXH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对原始名称进行的表面看来无意义的修饰（或矫正，因人而异）将对参数数目和类型进行编码</p><h4 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h4><p>函数模板是通用的函数描述，也就是说，他们使用泛型来定义函数，其中的泛型可用具体的类型（如int和double）替换。由于模板允许以泛型的方式编写程序，因此有时也被称为通用编程</p><p>交换两个数例子</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">AnyType</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>AnyType <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> AnyType <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    AnyType temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">Swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl         <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220311214719752.png"></p><p>在标准C++98添加关键字typename之前，C++使用关键字class来创建模板</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">AnyType</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>AnyType <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> AnyType <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    AnyType temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板重载</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T<span class="token operator">*</span> a<span class="token punctuation">,</span> T<span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token function">Swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl        <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Swap</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    T temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> T b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    T temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220311220134273.png"></p><p>模板的局限性</p><p>假设有如下模板函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span>T b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面的代码假定定义了赋值，但如果T为数组，这种假设不成立</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">a<span class="token operator">=</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样，下面的语句假设定义了&lt;，但如果T为结构，该假设便不成立</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，为数组名定义了运算符&gt;,但由于数组名为地址，因为它比较的是数组的地址，而这可能不是您希望的。下面的语句假定为类型T定义了乘法运算符，但如果T数组、指针或结构，这种假设便不成立</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">T c = a*b;   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>显示具体化</strong></p><p>第三代具体化-ISO/ANSI C++标准</p><ul><li><p>对于给定的函数名，可以有非模板函数、模板函数和显示具体化模板函数以及它们的重载版本</p></li><li><p>显式具体化的原型和定义应以template&lt;&gt;打头，并通过名称来指出类型</p></li><li><p>具体化优先于常规模板，而非模板函数优先于具体化和常规模板</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 非模板函数原型</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>job <span class="token operator">&amp;</span><span class="token punctuation">,</span> job <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 常规模板函数原型</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span><span class="token punctuation">,</span> T <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 显示具体化模板函数原型</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">Swap</span><span class="token generic class-name"><span class="token operator">&lt;</span>job<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>job <span class="token operator">&amp;</span><span class="token punctuation">,</span> job <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  下面举个交换结构的实例来说显式具体化的好处</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">job</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">int</span> floor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token generic-function"><span class="token function">Swap</span><span class="token generic class-name"><span class="token operator">&lt;</span>job<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>job <span class="token operator">&amp;</span>j1<span class="token punctuation">,</span> job <span class="token operator">&amp;</span>j2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>job <span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token punctuation">.</span><span class="token function">setf</span><span class="token punctuation">(</span>ios<span class="token double-colon punctuation">::</span>fixed<span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>floatfield<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i ,j = "</span>         <span class="token operator">&lt;&lt;</span> i         <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">".\n"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Using compiler-generated int swapper:\n"</span><span class="token punctuation">;</span>    <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Now i,j= "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">".\n"</span><span class="token punctuation">;</span>    job cue <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Susan Yaffee"</span><span class="token punctuation">,</span> <span class="token number">73000.60</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    job sidney <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Sidney Taffee"</span><span class="token punctuation">,</span> <span class="token number">78060.72</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Before job swapping:\n"</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>cue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>sidney<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Swap</span><span class="token punctuation">(</span>cue<span class="token punctuation">,</span> sidney<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"After job swapping:\n"</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>cue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show</span><span class="token punctuation">(</span>sidney<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    T temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token generic-function"><span class="token function">Swap</span><span class="token generic class-name"><span class="token operator">&lt;</span>job<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>job <span class="token operator">&amp;</span>j1<span class="token punctuation">,</span> job <span class="token operator">&amp;</span>j2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> t1<span class="token punctuation">;</span>    <span class="token keyword">int</span> t2<span class="token punctuation">;</span>    t1 <span class="token operator">=</span> j1<span class="token punctuation">.</span>salary<span class="token punctuation">;</span>    j1<span class="token punctuation">.</span>salary <span class="token operator">=</span> j2<span class="token punctuation">.</span>salary<span class="token punctuation">;</span>    j2<span class="token punctuation">.</span>salary <span class="token operator">=</span> t1<span class="token punctuation">;</span>    t2 <span class="token operator">=</span> j1<span class="token punctuation">.</span>floor<span class="token punctuation">;</span>    j1<span class="token punctuation">.</span>floor <span class="token operator">=</span> j2<span class="token punctuation">.</span>floor<span class="token punctuation">;</span>    j2<span class="token punctuation">.</span>floor <span class="token operator">=</span> t2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>job <span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">":$"</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">.</span>salary <span class="token operator">&lt;&lt;</span> <span class="token string">" on floor "</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">.</span>floor <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220312171926429.png"></p></li></ul><p><strong>实例化和具体化</strong></p><p>隐式实例化、显式实例化和显式具体化统称为具体化。它们的相同之处在于，它们表示的都是使用具体类型的函数定义，而不是通用描述</p><p>引入显式实例化后，必须使用新的语法—在声明中使用前缀template和template&lt;&gt;，以区分显式实例化和显式具体化。通常功能越多，语法规则也越多</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span><span class="token punctuation">,</span>T <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token generic-function"><span class="token function">Swap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span><span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token keyword">template</span> <span class="token keyword">void</span> <span class="token generic-function"><span class="token function">Swap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">&amp;</span><span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显式实例化，并用模板定义来生成Swap()的char版本</span><span class="token keyword">short</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token function">Swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>job n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token function">Swap</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">,</span>h<span class="token punctuation">;</span><span class="token function">Swap</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译器选择使用哪个函数版本</strong><br>对于函数重载、函数模板和函数模板重载，C++需要（且有）一个定义良好的策略，来决定为函数调用使用哪一个函数定义，尤其是有多个参数时。这个过程称为重载解析（overloading resolution)</p><ul><li>第一步：创建候选函数列表。其中包含与被调用函数的名称相同的函数和模板函数</li><li>第二步：使用候选函数列表创建可行函数列表。这些都是参数数目正确的函数，为此有一个隐式转换序列，其中包括实参类型与相应的参数类型完全匹配的情况。例如，使用float参数的函数调用可以将参数转换为double,从而与double形参匹配，而模板可以为float生成一个实例</li><li>第三步：确定是否有最佳的可行函数。如果有，则使用它，否则该函数调用出错</li></ul><p>下面的调用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">may</span><span class="token punctuation">(</span><span class="token char">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先，编译器将寻找候选者，即名称为may()的函数和函数模板。然后寻找那些可以用一个参数调用的函数。例如，下面的函数符合要求，因为其名称与被调用的函数相同，且可只给它们传递一个参数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">may</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//#1</span><span class="token keyword">float</span> <span class="token function">may</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">,</span><span class="token keyword">float</span> <span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//#2</span><span class="token keyword">void</span> <span class="token function">may</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//#3</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">may</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//#4</span><span class="token keyword">char</span> <span class="token function">may</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//#5</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">may</span><span class="token punctuation">(</span><span class="token keyword">const</span> T <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//#6</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token keyword">void</span> <span class="token function">may</span><span class="token punctuation">(</span>T <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//#7 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>排除#4和#7，剩下5个可行函数，编译器确定哪个是最佳的<br>1.完全匹配，但常规函数优先于模板<br>2.提升转换（例如，char和shorts自动转换为int，float自动转换为double）<br>3.标准转换（例如，int转换为char，long转换为double）<br>4.用户定义的转换，如类声明中定义的转换</p><p>所以函数#3、#5、#6优于函数#1和#2，因为它们都是完全匹配的，#6是函数模板，所以剩下#3,#5，有两个完全匹配是一种错误，这里会生成一条错误消息，该消息是诸如“ambiguous（二义性）”这样的词语<br>但是一个完全匹配优于另一个的另一种情况是，其中一个是非模板函数，而另一个不是。非模板函数将优先于模板函数（包括显式具体化）<br>如果两个完全匹配的函数都是模板函数，则较具体的模板函数优先。</p><p>用于找出最具体的模板的规则被称为<strong>函数模板的部分排序规则（partial ordering rules）</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">ShowArray</span><span class="token punctuation">(</span>T arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">ShowArray</span><span class="token punctuation">(</span>T <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">debts</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> amount<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">int</span> things<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token number">310</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">debts</span> mr_E<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span>        <span class="token punctuation">{</span>            <span class="token punctuation">{</span><span class="token string">"Ima WoLfe"</span><span class="token punctuation">,</span> <span class="token number">2400.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"Ura Foxe"</span><span class="token punctuation">,</span> <span class="token number">1300.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">"Iby Stout"</span><span class="token punctuation">,</span> <span class="token number">1800.0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token operator">*</span>pd<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        pd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>mr_E<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>amount<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Listing Mr.E's counts of things:\n"</span><span class="token punctuation">;</span>    <span class="token function">ShowArray</span><span class="token punctuation">(</span>things<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Listing Mr.E's debts:\n"</span><span class="token punctuation">;</span>    <span class="token function">ShowArray</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">ShowArray</span><span class="token punctuation">(</span>T arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Template A\n"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">ShowArray</span><span class="token punctuation">(</span>T <span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"template B:\n"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这两个模板中，第二个模板更具体，因为他做了特定的假设-数组内容是指针，如果取消第二个模板你会发现显示的将是地址</p><p><strong>创建自定义选择</strong><br>在有些情况下，可通过编写合适的函数调用，引导编译器做出您希望的选择</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span> T <span class="token function">letter</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span>T b<span class="token punctuation">)</span><span class="token comment">//#1</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">letter</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment">//#2</span><span class="token punctuation">{</span>    a <span class="token operator">=</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>a <span class="token operator">:</span> a<span class="token punctuation">;</span>    b <span class="token operator">=</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>b <span class="token operator">:</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">15.5</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token number">25.9</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">letter</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//USE #2</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">letter</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//USE #1 WITH DOUBLE</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">letter</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//USE #1 WITH INT</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">letter</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//USE #1 WITH INT</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220312182647430.png" alt="image-20220312182647430"></p><p><strong>模板函数的发展</strong></p><p>在C++98时编写模板函数时会有下面那种想法</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">template&lt;class T1,class T2&gt;void fd(T1 x,T2 y){...?type?xpy = x+y;...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xpy应为什么类型呢？由于不知道ft()将如何使用，因此无法预先知道这一点。正确的类型 可能是T1、T2或其他类型。例如,T1可能是double类型，而T2可能是int，在这种情况下，两个变量的和将为double类型。T1可能是short，而T2可能是int，在这种情况下，两个变量的和为int类型。T1还可能是short，而T2可能是char，在这种情况下，加法运算将导致自动整型提升，因此结果类型为int，另外，结构和类可能重载运算符+，这导致问题更加复杂.因此，在C++98中，没有办法声明xpy的类型</p><p><strong>关键字decltype(C++11)</strong></p><p>C++11新增的关键字decltype提供了解决方案</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> y<span class="token punctuation">;</span><span class="token comment">//make y the same type as x </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>给decltype提供的参数可以是表达式，因此在前面的模板函数fd()中，可使用下面的代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span> xpy<span class="token punctuation">;</span><span class="token comment">//make xpy the same type as x + y</span>xpy <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另一种方法是，将这两条语句合而为一</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span> xpy <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此C++98的想法可得以实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">ft</span><span class="token punctuation">(</span>T1 x<span class="token punctuation">,</span>T2 y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span> xpy <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为确定类型，编译器必须遍历一遍核对表</strong><br>假设有如下声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">decltype</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span> var<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则核对表的简化版如下</p><p>第一步：如果expression是一个没有用括号括起的标识符，则var的类型与该标识符的类型相同，包括const等限定符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">5.5</span><span class="token punctuation">;</span><span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token number">7.9</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token operator">&amp;</span>rx <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> <span class="token operator">*</span>pd<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> w<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>rx<span class="token punctuation">)</span> u <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>pd<span class="token punctuation">)</span> v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：如果expression是一个函数调用，则var的类型与函数的返回类型相同</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token function">indeed</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token function">indeed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> m<span class="token punctuation">;</span><span class="token comment">//m is type list </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第三步：如果expression是一个左值，则var为指向其类型的引用。这好像意味着前面的w为引用类型，因为x是一个左值。但别忘了，这种情况已经在第一步处理过了。要进入第三步，expression不能是未用括号括起的标识符，那么，expression是什么时将进入第三步呢？一种显而易见的情况是，expression使用括号括起的标识符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> xx <span class="token operator">=</span> <span class="token number">4.4</span><span class="token punctuation">;</span><span class="token keyword">decltype</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">)</span> r2 <span class="token operator">=</span> xx<span class="token punctuation">;</span><span class="token comment">//r2 is double &amp;</span><span class="token keyword">decltype</span> <span class="token punctuation">(</span>xx<span class="token punctuation">)</span> w <span class="token operator">=</span> xx<span class="token punctuation">;</span><span class="token comment">// w is double </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>括号不会改变表达式的值和左值性。下面两条语句等效</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">xx <span class="token operator">=</span> <span class="token number">98.6</span><span class="token punctuation">;</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">98.6</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第四步：如果前面的条件都不满足，则var的类型与expression的类型相同</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>k <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span> i1<span class="token punctuation">;</span><span class="token comment">//i1 type int </span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">)</span> i2<span class="token punctuation">;</span><span class="token comment">// i2 type long</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>k<span class="token operator">+</span>n<span class="token punctuation">)</span> i3<span class="token punctuation">;</span><span class="token comment">// i3 type int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，虽然k和n都是引用，但表达式k+n不是引用：它是两个int的和，因此类型为int</p><p>如果需要多次声明，可结合使用typedef和decltype</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">ft</span><span class="token punctuation">(</span>T1 x<span class="token punctuation">,</span>T2 y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">typedef</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span> xtype<span class="token punctuation">;</span>xtype xpy <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>xytype arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>xytype <span class="token operator">&amp;</span>rxy <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//rxy a reference</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种函数声明语法(C++11后置返回类型）</p><p>有一个相关的问题是decltype 本身无法解决的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span><span class="token operator">?</span>type<span class="token operator">?</span> <span class="token function">gt</span> <span class="token punctuation">(</span>T1 x<span class="token punctuation">,</span>T2 y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无法预先知道将x和y相加得到的类型。好像可以将返回类型设置为decltype(x+y)，但不幸的是，此时还未声明参数x和y，它们不在作用域内</p><p>但C++新增了一种声明和定义函数的语法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">float</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用新增的语法可编写成这样</p><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">auto h(int x,float y)-&gt;double;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将返回类型移到了参数声明后面。-&gt;double 被称为后置返回类型(trailing return type)。其中auto是一个占位符，表示后置返回类型提供的类型，这是C++11给auto新增的一种角色</p><p>通过结合使用这种语法和decltype，便可给gt()指定返回类型</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span><span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span><span class="token keyword">auto</span> <span class="token function">gt</span><span class="token punctuation">(</span>T1 x<span class="token punctuation">,</span>T2 y<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>decltype在参数声明后面，因此x和y位于作用域内，可以使用它们</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><h4 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h4><p>C和C++使用&amp;符号来指示变量的地址。C++给&amp;符号赋予了另一个含义，将其用来声明引用。例如rodents作为rats变量的别名</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> rats<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>rodents <span class="token operator">=</span> rats<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里&amp;不是地址运算符,int&amp;指的是指向int的引用，上述引用声明允许将rats和rodents互换-他们指向相同的值和内存单元</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> rats <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> rodents <span class="token operator">=</span> rats<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>rats<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rodents <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>rodents<span class="token operator">++</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>rodents <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310171957752.png"></p><p>引用看起来很像指针，但除了表示不同，还有就是必须是声明引用时，将其初始化，而不像指针那样，可以先声明在赋值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> rat<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>rodent<span class="token punctuation">;</span><span class="token comment">//invalid</span>rodent <span class="token operator">=</span> rat<span class="token punctuation">;</span><span class="token comment">//invalid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>引用更接近const指针，必须在创建时进行初始化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;</span>rodents <span class="token operator">=</span> rat<span class="token comment">//实际上是下述代码的伪装表示</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> pr <span class="token operator">=</span> <span class="token operator">&amp;</span>rats<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> rats <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> rodents <span class="token operator">=</span> rats<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>rats<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rodents <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> mouse <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>rats <span class="token operator">=</span> mouse<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>mouse <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>rodents <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310173334449.png"></p><p>值变了，但rodents地址和mouse不相同</p><h4 id="将引用用作函数参数"><a href="#将引用用作函数参数" class="headerlink" title="将引用用作函数参数"></a><strong>将引用用作函数参数</strong></h4><p>这种传递参数的方法称为引用传递按引用传递。允许被调用的函数能够访问调用函数中的变量。C++新增的这项特性是对<strong>C语言的超越</strong>，C语言只能按值传递，按值传递导致被调用函数使用调用程序的值的拷贝。当然C语言也允许避开按值传递的限制，采用按指针传递的方式</p><p>依旧是以<strong>交换两个变量</strong>的值做例子</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span>temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310175256100.png"></p><h4 id="左值"><a href="#左值" class="headerlink" title="左值"></a><strong>左值</strong></h4><p><strong>左值</strong>：左值参数是可被引用的数据对象，例如，变量、数组元素、结构成员、引用和解除引用的指针都是左值。在C语言中，左值最初指的是可出现在赋值语句左边的实体，但这是引入关键字const之前的情况。现在常规变量和const变量都可被视为左值，因为可通过地址访问它们。但常规变量属于可修改的左值，而const变量属于不可修改的左值</p><p><strong>应尽可能使用const</strong><br>将引用参数声明为常数数据的引用的理由有三个：<br>⭐ 使用const可以避免无意中修改数据的编程错误<br>⭐ 使用const使函数能够处理const 和 非 const 实参，否则将只能接受非const数据<br>⭐ 使用const 引用使函数能够正确生成并使用临时变量</p><h4 id="右值"><a href="#右值" class="headerlink" title="右值"></a>右值</h4><p>C++11新增了另一种引用-右值引用(rvalue reference).这种引用可指向右值，是使用&amp;&amp;声明的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">double</span>  <span class="token operator">&amp;&amp;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310181325457.png"></p><p>新增右值引用的主要目的是，让库设计人员能够提供有些操作的更有效的实现</p><p>将引用用于结构</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">free_throws</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> made<span class="token punctuation">;</span>    <span class="token keyword">int</span> attempts<span class="token punctuation">;</span>    <span class="token keyword">float</span> percent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">const</span> free_throws<span class="token operator">&amp;</span> ft<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">set_pc</span><span class="token punctuation">(</span>free_throws<span class="token operator">&amp;</span> ft<span class="token punctuation">)</span><span class="token punctuation">;</span>free_throws<span class="token operator">&amp;</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>free_throws<span class="token operator">&amp;</span> target<span class="token punctuation">,</span> <span class="token keyword">const</span> free_throws<span class="token operator">&amp;</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    free_throws one <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"zhoumouren"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws two <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"caimouren "</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws three <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Minnie Max"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws four <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"whily Looper"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws five <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Long long"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws team <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Throwgood"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws dup<span class="token punctuation">;</span>    <span class="token function">set_pc</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">accumulate</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span> two<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span><span class="token function">accumulate</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span> three<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    dup <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span> five<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Displaying team:\n"</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Displaying dup after assignment:\n"</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>dup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_pc</span><span class="token punctuation">(</span>four<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">accumulate</span><span class="token punctuation">(</span>dup<span class="token punctuation">,</span> five<span class="token punctuation">)</span> <span class="token operator">=</span> four<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Displaying dup after ill-advised assignment:\n"</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>dup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">const</span> free_throws<span class="token operator">&amp;</span> ft<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Name: "</span> <span class="token operator">&lt;&lt;</span> ft<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" Made:"</span> <span class="token operator">&lt;&lt;</span> ft<span class="token punctuation">.</span>made <span class="token operator">&lt;&lt;</span> <span class="token char">'\t'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Attempts:"</span> <span class="token operator">&lt;&lt;</span> ft<span class="token punctuation">.</span>attempts <span class="token operator">&lt;&lt;</span> <span class="token char">'\t'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Percent"</span> <span class="token operator">&lt;&lt;</span> ft<span class="token punctuation">.</span>percent <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">set_pc</span><span class="token punctuation">(</span>free_throws<span class="token operator">&amp;</span> ft<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ft<span class="token punctuation">.</span>attempts <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        ft<span class="token punctuation">.</span>percent <span class="token operator">=</span> <span class="token number">100.0f</span> <span class="token operator">*</span> <span class="token keyword">float</span><span class="token punctuation">(</span>ft<span class="token punctuation">.</span>made<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span>ft<span class="token punctuation">.</span>attempts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        ft<span class="token punctuation">.</span>percent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>free_throws<span class="token operator">&amp;</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>free_throws<span class="token operator">&amp;</span> target<span class="token punctuation">,</span> <span class="token keyword">const</span> free_throws<span class="token operator">&amp;</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    target<span class="token punctuation">.</span>attempts <span class="token operator">+=</span> source<span class="token punctuation">.</span>attempts<span class="token punctuation">;</span>    target<span class="token punctuation">.</span>made <span class="token operator">+=</span> source<span class="token punctuation">.</span>made<span class="token punctuation">;</span>    <span class="token function">set_pc</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="为何要返回引用"><a href="#为何要返回引用" class="headerlink" title="为何要返回引用"></a><strong>为何要返回引用</strong></h4><p>先看下面一段代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> m <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">25.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在第一条语句中，值4.0被复制到一个临时位置，然后被复制给m。第二条语句，值5.0被复制到一个临时位置，然后传递给<strong>cout</strong></p><p>再来看下面一条语句</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dup <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span>five<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>如果accumulate()返回一个结构，而不是指向结构的引用，将把整个结构复制到一个临时位置，再将这个拷贝复制给dup。但在这返回值为引用时，将直接把team复制到dup上，其效率更高</strong></p><h4 id="何时使用引用参数"><a href="#何时使用引用参数" class="headerlink" title="何时使用引用参数"></a><strong>何时使用引用参数</strong></h4><ul><li>程序员能够修改调用函数中的数据对象</li><li>通过传递引用而不是整个数据对象，可以提高程序的运行速度</li></ul><p><strong>什么时候应使用引用、什么时候应使用指针呢？什么时候应按值传递呢？下面是一些指导原则</strong><br>对于使用传递的值而不作修改的函数</p><ul><li>如果数据对象很小，如内置数据类型或小型结构，则按值传递</li><li>如果数据对象是数组，则使用指针，因为这是唯一的选择，并将指针声明为指向const的指针</li><li>如果数据对象是较大的结构，则使用const指针或const引用，以提高程序的效率.这样可以节省复制结构所需的时间和空间</li><li>如果数据对象是类对象，则使用const引用。类设计的语义常常要求使用引用，这是C++新增这项特性的主要原因。因此传递类对象参数的标准方式是按引用传递</li></ul><p>对于修改函数中数据的函数</p><ul><li>如果数据对象是内置数据类型，则使用指针。如果看到诸如fixit（&amp;x)这样的代码（其中x是int），则很明显，该函数将修改x</li><li>如果数据对象是数组，则只能使用指针</li><li>如果数据对象是结构，则使用引用或指针</li><li>如果数据对象是类对象，则使用引用</li></ul><p><strong>当然这只是一些指导原则，很可能有充分的理由做出其他的选择</strong></p><h3 id="内存模型和名称空间"><a href="#内存模型和名称空间" class="headerlink" title="内存模型和名称空间"></a>内存模型和名称空间</h3><h4 id="单独编译"><a href="#单独编译" class="headerlink" title="单独编译"></a>单独编译</h4><p>C++鼓励程序员将组件函数放在独立的文件，可以单独编译这些文件，然后将它们链接成可执行的程序（通常C++编译器既编译程序，也管理链接器）如果只修改了一个文件，则可以只重新编译该文件，然后将它与其他文件的编译版本链接，这会使得大程序的管理更便捷。大多数C++环境都提供了其他工具来帮助管理，unix和linux系统都具有make程序，而windows也有相应的CMake程序</p><p><strong>原来的程序可以分为三部分</strong><br>头文件：包含结构声明和使用这些结构的函数的原型<br>源代码文件：包含与结构相关的函数的代码<br>源代码文件：包含调用与结构相关的函数的代码</p><p><strong>头文件中常包含的内容</strong>：<br>⭐函数原型<br>⭐使用#define或const定义的符号常量<br>⭐结构声明<br>⭐类声明<br>⭐模板声明<br>⭐内联函数</p><p><strong>头文件管理</strong><br>在同一个文件中只能将同一个文件包含一次，记住这个规则很容易，但很可能在不知情的情况下将头文件包含多次，但有一种C/C++技术可以避免多次包含同一个头文件。它是基于预处理器编译指令#ifndef(即if not defined)的</p><p><strong>coordin.h:</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">COORDIN_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COORDIN_H_</span></span><span class="token keyword">struct</span> <span class="token class-name">polar</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> distance<span class="token punctuation">;</span>    <span class="token keyword">double</span> angle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">rect</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>polar <span class="token function">rect_to_polar</span><span class="token punctuation">(</span>rect xypos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_polar</span><span class="token punctuation">(</span>polar dapos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种情况下，编译器将查看 #ifndef和#endif之间的内容，并读取定义COORDIN_H_的一行。如果在同一个文件中遇到其他包含coordin.h的代码，编译器将知道COORDIN_H_已经被定义了，从而跳到#endfif后面的一行上。这种方法并不能防止编译器将文件包含两次，而只是让它忽略除第一次包含之外的所有内容</p><p><strong>file1.cpp：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"coordin.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rect rplace<span class="token punctuation">;</span>    polar pplace<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter the x and y values: "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> rplace<span class="token punctuation">.</span>x <span class="token operator">&gt;&gt;</span> rplace<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pplace <span class="token operator">=</span> <span class="token function">rect_to_polar</span><span class="token punctuation">(</span>rplace<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show_polar</span><span class="token punctuation">(</span>pplace<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Next two numbers (q to quit): "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Bye!\n"</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>file2.cpp:</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"coordin.h"</span></span>polar <span class="token function">rect_to_polar</span><span class="token punctuation">(</span>rect xypos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    polar answer<span class="token punctuation">;</span>    answer<span class="token punctuation">.</span>distance <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>xypos<span class="token punctuation">.</span>x <span class="token operator">*</span> xypos<span class="token punctuation">.</span>x <span class="token operator">+</span> xypos<span class="token punctuation">.</span>y <span class="token operator">*</span> xypos<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    answer<span class="token punctuation">.</span>angle <span class="token operator">=</span> <span class="token function">atan2</span><span class="token punctuation">(</span>xypos<span class="token punctuation">.</span>y<span class="token punctuation">,</span> xypos<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> answer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show_polar</span><span class="token punctuation">(</span>polar dapos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> Rad_to_deg <span class="token operator">=</span> <span class="token number">57.29577951</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"distance = "</span> <span class="token operator">&lt;&lt;</span> dapos<span class="token punctuation">.</span>distance<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">",angle = "</span> <span class="token operator">&lt;&lt;</span> dapos<span class="token punctuation">.</span>angle <span class="token operator">*</span> Rad_to_deg<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" degrees\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这两个源代码文件和新的头文件一起进行编译和链接，将生成一个可执行程序</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220312195328025.png"></p><p>可执行文件</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220312200006937.png"></p><p>控制台窗口</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220312195748836.png" alt="image-20220312195748836"></p><h4 id="多个库的链接"><a href="#多个库的链接" class="headerlink" title="多个库的链接"></a><strong>多个库的链接</strong></h4><p>C++标准允许每个编译器设计人员以他认为合适的方式实现名称修饰，因此由不同编译器创建的二进制模块（对象代码文件）很可能无法正确地链接。也就是说两个编译器将为同一个函数生成不同的修饰名称。名称的不同将使链接器无法将一个编译器生成的函数调用与另一个编译器生成的函数定义匹配。在链接编译模块时，请确保所有对象文件或库都是由一个编译器生成的。如果有源代码，通常可以用自己的编译器重新编译源代码来消除链接错误</p><h4 id="存储持续性、作用域和链接性"><a href="#存储持续性、作用域和链接性" class="headerlink" title="存储持续性、作用域和链接性"></a><strong>存储持续性、作用域和链接性</strong></h4>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++98 </tag>
            
            <tag> C++11 </tag>
            
            <tag> c++14 </tag>
            
            <tag> C++17 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个人博客搭建笔记</title>
      <link href="/2022/02/25/hexo/"/>
      <url>/2022/02/25/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><p>使用基于hexo框架的github pages/gitee pages服务搭建博客的好处:</p><ul><li>全是静态文件,访问速度快</li><li>免费,托管在github和gitee不需要后台</li><li>数据安全</li><li>网站内容容易打包、迁移</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>拥有github账户<ul><li>新建一个<code>username.github.io</code>的仓库，username是你的用户名</li></ul></li><li>安装node.js <a href="http://nodejs.cn/download/">node.js</a> 下载最新版本即可</li><li>安装git <a href="https://git-scm.com/">git</a> 下载最新版本即可</li></ul><h2 id="配置SSH密钥"><a href="#配置SSH密钥" class="headerlink" title="配置SSH密钥"></a>配置SSH密钥</h2><ul><li><p>打开github进入到setting找到SSH and GPG keys一栏</p><p>  <img src="https://s3.bmp.ovh/imgs/2022/02/48bd081222b0057a.jpg"></p></li><li><p>点进去点击New SSH key 可以看到如下图所示</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/SSH-2.jpg"></p></li><li><p>然后生成本地密钥,找到<code>.ssh\id_rsa.pub </code> 复制其中的内容到key 添加成功后(其中title随便填)</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>此时git连接github/gitee 需要配置登录信息,以后就可以不用再配置了</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"用户名"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"邮箱"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages/Gitee Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装的位置可以自己选择</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生成并启动"><a href="#生成并启动" class="headerlink" title="生成并启动"></a>生成并启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g <span class="token comment">#生成</span>$ hexo s <span class="token comment">#启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时能看到如图所示(这里一开始是默认主题,比较简陋):<img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/hexo-s.jpg"></p><h3 id="部署到托管平台上"><a href="#部署到托管平台上" class="headerlink" title="部署到托管平台上"></a>部署到托管平台上</h3><ul><li><p>部署到github pages上，需要在站点配置文件_config.yml中配置：</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/master.png"></p></li><li><p>同时部署到gitee pages和github pages上，需要在站点配置文件_config.yml中配置：</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301172914182.png">   </p></li><li><p>返回git bash上开始部署</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>如果部署成功的话你将能看到<code>你的用户名.github.io</code>上网页内容有更新<br>但是github国内访问部署有时候偏慢,这里可以考虑gitee,流程变通一下即可</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>目前比较多人用的主题在github有next、butterfly等等,这两个主题都有比较具体的说明文档，在这里就不再介绍<br><a href="https://github.com/iissnan/hexo-theme-next">next主题文档说明</a><br><a href="https://butterfly.js.org/posts/21cfbf15/">butterfly主题文档说明</a><br><a href="https://github.com/blinkfox/hexo-theme-matery">matery主题文档说明</a><br>也可以自己寻找适合自己审美的主题，这些文档说明基本可以满足网页设计的基本需求</p><h2 id="其他补充"><a href="#其他补充" class="headerlink" title="其他补充"></a>其他补充</h2><h3 id="优质视频"><a href="#优质视频" class="headerlink" title="优质视频"></a>优质视频</h3><p>这里贴出两个不错并且适合萌新的视频：<br><a href="https://www.bilibili.com/video/BV1cv411N7kz?p=1">Hexo还是Hugo？Typecho还是Wordpress？</a><br><a href="https://www.bilibili.com/video/BV16W411t7mq?spm_id_from=333.788.top_right_bar_window_default_collection.content.click">使用Hexo博客搭建的个人博客，使用Next主题来进行优化改造</a></p><h3 id="好用的壁纸库"><a href="#好用的壁纸库" class="headerlink" title="好用的壁纸库"></a>好用的壁纸库</h3><p><a href="https://wallhaven.cc/">Awesome Wallpapers - wallhaven.cc</a></p><h3 id="好用的favicon网站"><a href="#好用的favicon网站" class="headerlink" title="好用的favicon网站"></a>好用的favicon网站</h3><p><a href="https://favicon.io/">The best Favicon Generator (completely free) - favicon.io</a></p><h3 id="绑定腾讯云域名"><a href="#绑定腾讯云域名" class="headerlink" title="绑定腾讯云域名"></a>绑定腾讯云域名</h3><p>目前gitee自定义域名要收费，要开通gitee pages pro，所以这里只介绍了基于github的域名解析：</p><ul><li>买了域名后在腾讯云控制台域名解析处将信息填好，记录类型A那里的记录值通过ping自己要解析的网站得到IP填入即可</li></ul><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301175838855.png"></p><ul><li><p>之后在./主题配置文件所在目录/source下创建一个不带后缀的CNAME文件，里面填写你买的的域名</p></li><li><p>部署到github上后打开setting将域名填入custom domain</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301180516848.png"></p></li><li><p>等到github pages更新后域名解析完毕</p></li></ul><h3 id="访问速度优化"><a href="#访问速度优化" class="headerlink" title="访问速度优化"></a>访问速度优化</h3><p>访问速度优化无非就是图片加载优化、代码压缩优化、全站CDN加速</p><p>这个可以参考大佬的文章：    <a href="https://blog.sky03.cn/posts/42790.html">Hexo进阶之各种优化 | Sky03我的薰衣草</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> node.js </tag>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
