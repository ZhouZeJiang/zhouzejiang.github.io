<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown语法笔记</title>
      <link href="/2022/02/27/markdown/"/>
      <url>/2022/02/27/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><ul><li>目前个人博客中写作所使用的较广泛的语言就是markdown</li><li>Markdown是一种轻量级标记语言,Markdown的轻量化、易读易写特性</li></ul><h2 id="2-Markdown基本用法"><a href="#2-Markdown基本用法" class="headerlink" title="2. Markdown基本用法"></a>2. Markdown基本用法</h2><h3 id="2-1-斜体"><a href="#2-1-斜体" class="headerlink" title="2.1 斜体"></a>2.1 斜体</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">我</span><span class="token punctuation">*</span></span><span class="token italic"><span class="token punctuation">_</span><span class="token content">我</span><span class="token punctuation">_</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-粗体"><a href="#2-2-粗体" class="headerlink" title="2.2 粗体"></a>2.2 粗体</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">我</span><span class="token punctuation">**</span></span><span class="token bold"><span class="token punctuation">__</span><span class="token content">我</span><span class="token punctuation">__</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-列表"><a href="#2-3-列表" class="headerlink" title="2.3 列表"></a>2.3 列表</h3><h4 id="2-3-1-有序列表"><a href="#2-3-1-有序列表" class="headerlink" title="2.3.1 有序列表"></a>2.3.1 有序列表</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1.第一行  2.第二行  3.第三行  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-无序列表"><a href="#2-3-2-无序列表" class="headerlink" title="2.3.2 无序列表"></a>2.3.2 无序列表</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 第一行  <span class="token list punctuation">-</span> 第二行  <span class="token list punctuation">-</span> 第三行    <span class="token list punctuation">-</span> 嵌套第一行<span class="token list punctuation">-</span> 嵌中嵌<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-图片"><a href="#2-4-图片" class="headerlink" title="2.4 图片"></a>2.4 图片</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!--插入图片--&gt;</span><span class="token url"><span class="token operator">!</span>[<span class="token content">网络图片</span>](<span class="token url">https://gitee.com/zhouzejiang/blogimage/raw/master/img/833BAFC4964143BEB14B975D7B0A2380EF8BF5EC</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-文字链接"><a href="#2-5-文字链接" class="headerlink" title="2.5 文字链接"></a>2.5 文字链接</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!--在正文中引用链接标记--&gt;</span>我最喜欢的博客就是周某人<span class="token url">[<span class="token content">周某人的Blog</span>](<span class="token url">https://github.com/ZhouZeJiang</span>)</span><span class="token comment">&lt;!--在底部定义链接标记--&gt;</span>我最喜欢的博客就是[周某人的Blog][周某人的Blog]：https://github.com/ZhouZeJiang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-网址链接"><a href="#2-6-网址链接" class="headerlink" title="2.6 网址链接"></a>2.6 网址链接</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;https://www.baidu.com&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-7-代码块"><a href="#2-7-代码块" class="headerlink" title="2.7 代码块"></a>2.7 代码块</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!--行内代码--&gt;</span> <span class="token code-snippet code keyword">`code`</span>    def test_print():        pass<span class="token comment">&lt;!--高亮化--&gt;</span><span class="token code"><span class="token punctuation">```</span><span class="token code-language">python</span><span class="token code-block language-python">def test_print():    pass</span><span class="token punctuation">```</span></span>~<span class="token strike"><span class="token punctuation">~~</span><span class="token content">def test_print():    pass</span><span class="token punctuation">~~</span></span>~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-引用"><a href="#2-8-引用" class="headerlink" title="2.8 引用"></a>2.8 引用</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span>6666666<span class="token blockquote punctuation">&gt;&gt;</span>66<span class="token bold"><span class="token punctuation">**</span><span class="token content">66</span><span class="token punctuation">**</span></span>66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-9-删除线"><a href="#2-9-删除线" class="headerlink" title="2.9 删除线"></a>2.9 删除线</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">你好啊<span class="token strike"><span class="token punctuation">~~</span><span class="token content">周先生</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-10-表情符号"><a href="#2-10-表情符号" class="headerlink" title="2.10 表情符号"></a>2.10 表情符号</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">:smile::laughing::+1:<span class="token comment">&lt;!--更多的emoji表情--&gt;</span>&lt;http://www.webpagefx.com/tools/emoji-cheat-sheet/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-11-表格"><a href="#2-11-表格" class="headerlink" title="2.11 表格"></a>2.11 表格</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">|标题|网址||----|:-||博客|https://github.com/ZhouzeJiang|<span class="token comment">&lt;!-- -:右对齐 :-左对齐--&gt;</span><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important">标题</span><span class="token punctuation">|</span><span class="token table-header important">网址</span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span><span class="token punctuation">----</span><span class="token punctuation">|</span><span class="token punctuation">----</span><span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data">博客</span><span class="token punctuation">|</span><span class="token table-data">https://github.com/ZhouZeJiang</span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-12-任务列表"><a href="#2-12-任务列表" class="headerlink" title="2.12 任务列表"></a>2.12 任务列表</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">-</span> [ ] 吃<span class="token list punctuation">-</span> [x] 喝<span class="token list punctuation">-</span> [x] 玩<span class="token list punctuation">-</span> [ ] 玩电脑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-13-锚点"><a href="#2-13-锚点" class="headerlink" title="2.13 锚点"></a>2.13 锚点</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">表格</span>](<span class="token url">#删除线</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-14-目录"><a href="#2-14-目录" class="headerlink" title="2.14 目录"></a>2.14 目录</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">[TOC]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Picgo"><a href="#3-Picgo" class="headerlink" title="3. Picgo"></a>3. Picgo</h2><ul><li><p>可以注意到hexo博客插入图片都是引用图床url的,这里github提供了一个免费开源软件Picgo</p><p>  Picgo:<a href="https://github.com/Molunerfinn/PicGo">Picgo下载</a></p></li><li><p>因为在国内访问gitee速度比github快很多：</p><p>  所以可以在Picgo安装gitee图床插件（插件设置-搜索gitee选其中一个即可）</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301201654617.png"></p><p>  在gitee新建一个仓库blogimage，然后去个人设置中找到私人令牌按如下操作点提交(描述随便填)</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301201941927.png"></p><p>  生成令牌后会获取token复制粘贴到Picgo，其他设置根据第一张图来就行,然后点击确定Picgo图床设置成功</p></li></ul><h2 id="4-typora"><a href="#4-typora" class="headerlink" title="4. typora"></a>4. typora</h2><ul><li><p>Markdown编辑器我个人主用的是typora,但是目前typora已收费，新用户试用15天：</p><p>  typora:<a href="https://www.typora.net/">typora下载</a></p></li><li><p>Github上也有一个不错的免费开源markdown编辑器：</p><p>  marktext:<a href="https://github.com/marktext/marktext">marktext下载</a></p></li><li><p>使用typora非常方便，typora拥有的快捷键能让工作时间大幅减少,这里主要讲typora插入图片转图床的设置</p><p>  在上述Picgo完成设置后，打开typora-设置-图像</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301203951167.png"></p><p>  按上述配置好,先点击下载或更新,然后验证图片上传选项，成功即可</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> picgo </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语法笔记</title>
      <link href="/2022/02/25/C++/"/>
      <url>/2022/02/25/C++/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>是一个整合C++相关书籍所学内容的C++笔记</p><h2 id="2-C-基本语法"><a href="#2-C-基本语法" class="headerlink" title="2. C++基本语法"></a>2. C++基本语法</h2><h3 id="2-1-开始"><a href="#2-1-开始" class="headerlink" title="2.1 开始"></a>2.1 开始</h3><ul><li><p>int main()描述的是main()和操作系统的接口</p></li><li><p>有些编程环境提供的框架程序，该程序调用一些非标准函数，如_tmain()，但实际上还是离不开main()，它有一个隐藏main()，来调用_tmain()</p></li><li><p>注释：</p><table><thead><tr><th align="center">C++</th><th align="center">C</th></tr></thead><tbody><tr><td align="center"><code>//</code></td><td align="center"><code>/*......*/</code></td></tr></tbody></table></li><li><p>C++头文件名依旧可以使用C风格，但转换后例如C++版本的math.h为cmath，去掉h不只是形式上的变化，没有h的头文件也可以包含名称空间</p></li><li><p>名称空间可以在开头处声明，也可以在函数中声明，也可以不声明直接引入名称空间std</p></li><li><p>C++的cout某种程度上比printf聪明很多，例如：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//会发现错误</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">25</span><span class="token punctuation">;</span><span class="token comment">//成功打印字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>cout后插入的运算符&lt;&lt;看上去像左移运算符，这其实是个运算符重载的例子，将字符串插入到输出流中</p><p>  cin后抽取运算符&gt;&gt;看上去像右移运算符，这也是个运算符重载的例子，从输入流中抽取字符</p></li><li><p>cout是一个ostream类对象，cin是一个istream类对象</p></li><li><p>关键字，例如int、void、return、string等等不能用作变量名和函数名</p></li></ul><h3 id="2-2-数据处理"><a href="#2-2-数据处理" class="headerlink" title="2.2 数据处理"></a>2.2 数据处理</h3><ul><li><p>&amp;a：&amp;的作用就是检索a的内存地址</p></li><li><p>使用的内存量越大，可以表示的范围也越大</p></li><li><p>sizeof可以用来检查类型的长度，单位为字节</p></li><li><p>climits文件中定义的两个符号常量（INT_MAX和INT_MIN）来确定其参数是否位于适当的范围内</p></li><li><p><strong>类型别名</strong></p><p>  C++为类型建立别名的方式有两种：</p><p>  一种是使用预处理器#define 别名 typename,以下zzz即char的别名</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">zzz</span> <span class="token expression"><span class="token keyword">char</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  一种是使用关键字typedef来创建别名typedef typename别名</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">char</span> zzz<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>无符号unsigned + 类型什么时候会用到：确保变量表示的值不可能出现负数，且unsigned所设变量能取更大范围的值</p></li><li><p><strong>字符函数库cctype</strong></p><p>  C++从C语言继承了一个与字符相关的、非常方便的函数软件包，它可以简化诸如确定字符是否为大写字母、数字、标点符号等工作</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201011111945286.png"></p></li><li><p>16进制前缀：<code>0x</code>  </p><p>  8进制：<code>0 </code></p><p>  二进制前缀：<code>0b</code></p></li><li><p><strong>浮点数E表示法</strong>：<code>d.ddE+n </code>小数点向右移n位，<code>d.ddE-n </code>小数点左移n位</p><p>  右移:<code>3.45E6=3.45E+6=3.450000</code>  </p><p>  左移:<code>3.45E-2=0.0345</code></p><p>  浮点常量F/f表示float，E/e表示double，L/l表示long double</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">3.45E+22f</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">0.1f</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">-</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  输出J结果是0</p><p>  <code>因为2.34E+22f是在第23位加上1 ，但float只能表示数字中的前6位或前七位</code></p><p>  <strong>浮点数与整数相比</strong></p><p>  优点：浮点数能表示整数，能表示范围大</p><p>  缺点：浮点数运算速度通常比整数慢，且精度降低</p></li><li><p>C++的cout.setf()函数：<a href="https://blog.csdn.net/baishuiniyaonulia/article/details/79144033">C++ 中的 cout.setf() 函数_白水的博客-CSDN博客_cout.setf()</a></p></li><li><p>类型转换潜在的数值转换问题</p><ul><li><p>将较大的浮点类型转换为较小的浮点类型例如double的2111222333转换为float，精度有效数位降低，四舍五入为2.11122E9</p></li><li><p>将浮点数类型转换为整型=&gt;小数部分丢失，原来的值可能类型的取值范围，在这种情况下，结果将是不确定的</p></li><li><p>将较大的整型转换为较小的整型，如long转换为short，原来的值可能超出目标类型的取值范围，通常只复制右边的字节</p></li><li><p>一种严格的类型转换<code>static_cast&lt;&gt;</code></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>结果输出为97</code></p></li></ul></li><li><p>C++11的auto关键字</p><p>  简单概括来说auto的自动类型推断发生在编译期，所以使用auto并不会造成程序运行时效率的降低。</p><p>  1.auto声明的变量必须必须要初始化，否则编译器不能判断变量的类型</p><p>  2.auto不能被声明为返回值，auto不能作为形参，auto不能被修饰为模板参数</p><p>  这里举个简单的例子</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">auto</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>输出结果为int</code></p><p>  详细参考<a href="https://blog.csdn.net/qq_31930499/article/details/79948906">c++ auto关键字使用_年轻气盛 温顺尚早-CSDN博客_c++auto</a></p></li></ul><h3 id="2-3-数组"><a href="#2-3-数组" class="headerlink" title="2.3 数组"></a>2.3 数组</h3><h4 id="2-3-1-定长数组"><a href="#2-3-1-定长数组" class="headerlink" title="2.3.1 定长数组"></a>2.3.1 定长数组</h4><p>四种赋值方式</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但这种是绝不允许的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数组初始化为0</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中列表初始化禁止缩窄转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">25</span>，<span class="token number">92</span>，<span class="token number">3.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//浮点数转整型为缩窄操作</span><span class="token keyword">char</span> array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token char">'h'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">,</span><span class="token number">121212</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//121212显然超出了char变量的取值范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>字符串读入到char数组中末尾会加n个’\0’元素补充数组长度</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//内存分配则为a b c \0 \0 \0 \0 \0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>‘ ‘和“ ”的区别</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> cue <span class="token operator">=</span> <span class="token char">'s'</span><span class="token punctuation">;</span><span class="token comment">//字符常量赋值给cue</span><span class="token keyword">char</span> cue <span class="token operator">=</span> <span class="token string">"s"</span><span class="token punctuation">;</span><span class="token comment">//s和\0组成的字符串，实际上表示的是字符串所在内存地址，不能直接赋值给cue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>拼接字符串常量，第一个字符串末尾的\0字符会被第二个字符串的首字符代替</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span><span class="token string">"2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>输出结果为12</code></p><p><strong>字符串输入的一个坑</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> classes<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your name:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your class"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> classes<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n classes:"</span> <span class="token operator">&lt;&lt;</span> classes<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220303153230969.png" alt="image-20220303153230969"></p><p> cin把zhoumouren作为第一个字符串，并把它放到name数组，这时把two留在输入队列中，之后cin在输入搜索classes时发现了two，因此直接放入了classes数组之中</p><p>这时候可以引入cin.getline(name,size)，很好的解决了第七的问题，字符的最后位位‘\0’，故最多读取size-1个字符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> classes<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your name:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your class:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n classes:"</span> <span class="token operator">&lt;&lt;</span> classes<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304000927715.png"></p><p>面向行的输入还有cin.get()，但是不能像cin.getline一样直接操作，因为get(name,size)会读取不会丢弃换行符，会将换行符保留在输入序列中，而getline(name,size)会直接丢弃换行符，出现    <code>幻影换行符</code>的问题故想要和getline效果一样，需要以这种形式操作：cin.get(name,size).get()</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> classes<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your name:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your class:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n classes:"</span> <span class="token operator">&lt;&lt;</span> classes<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304000927715.png"></p><p>还有另外一种<code>幻影换行符</code>的例子，混合输入字符串和数字会出现的问题</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token keyword">char</span> classes<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your year:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>year<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"enter your class:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>classes<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name:"</span> <span class="token operator">&lt;&lt;</span>year <span class="token operator">&lt;&lt;</span> <span class="token string">"\n classes:"</span> <span class="token operator">&lt;&lt;</span> classes<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304001527750.png"></p><p>因为这时候cin&gt;&gt;year会将换行符同样留在输入流中，只要在后面cin.get()或者将cin&gt;&gt;year改成(cin&gt;&gt;year).get()即可</p><h4 id="2-3-2-数组的替代品"><a href="#2-3-2-数组的替代品" class="headerlink" title="2.3.2 数组的替代品"></a>2.3.2 <strong>数组的替代品</strong></h4><p><strong>模板类vector</strong></p><p>模板类vector类似于string类，也是一种动态数组。是由C++98新增的标准模板库（STL）提供的。您在运行阶段设置vector对象的长度，可在末尾添加新数据，还可在中间插入新数据。实际上vector类确实使用new和delete来管理内存，但这种工作是自动完成的。使用时需要包含头文件vector。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>模板类array（C++11）</strong></p><p>vector类的功能比数组强大，但付出的代价是效率稍低。如果你需要的是长度固定的数组<br>，使用数组是更佳的选择，但代价是不那么方便和安全。故C++11新增了模板类array，它也位于名称空间std中。array对象的长度是固定的，是使用栈存储的，因此效率和数组相同，更方便，更安全。使用时需要包含头文件array。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//array&lt;typename,n_elem&gt; a=&gt;typename指变量类型，a指数组名称，n_elem表示大小</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是可行的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> d<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> c<span class="token punctuation">;</span>d <span class="token operator">=</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308003622889.png"></p><p><strong>非法索引</strong></p><p>与C语言一样，C++也不检查这种超界错误</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">double</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308004152237.png"></p><p>可以用vector和array对象函数at()在运行期间来捕获这些非法索引，而这种检查的代价是运行时间更长，但好处在于降低意外越界错误的概率（目前VS2022在使用了模板类array和vector，不加at也会抛出异常）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308004551157.png"></p><h3 id="2-4-循环"><a href="#2-4-循环" class="headerlink" title="2.4 循环"></a>2.4 循环</h3><h4 id="2-4-1-普通循环"><a href="#2-4-1-普通循环" class="headerlink" title="2.4.1 普通循环"></a><strong>2.4.1 普通循环</strong></h4><p>i++：先取值再加1<br>++i：先加1再取值<br>i- - ：先取值再减1<br>- -i ：先减1再取值</p><p><strong>for循环</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//循环体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>for可以是空表达式，而while不行，这里for表示的空表达式是无限循环</code></p><p><strong>while循环</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//循环体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>do while循环</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">do</span><span class="token punctuation">{</span><span class="token comment">//i++,循环体</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i=31 循环中断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-基于范围的for循环C-11"><a href="#2-4-2-基于范围的for循环C-11" class="headerlink" title="2.4.2 基于范围的for循环C++11"></a><strong>2.4.2 基于范围的for循环C++11</strong></h4><p><strong>对容器的遍历</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> length<span class="token operator">&gt;</span> arr<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> arr<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308184305010.png"></p><p><strong>对列表的遍历</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308184554900.png"></p><p><strong>修改数组元素</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> length<span class="token operator">&gt;</span> arr<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span>x <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>x <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件尾条件</strong></p><p>EOF：一种功能强大的技术，且是在文件iostream中定义的<br>很多PC编程环境都将ctrl+z视为模拟的EOF<br>举个例子cin.eof()</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> ch<span class="token punctuation">;</span><span class="token operator">++</span>count<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">"characters read\n"</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308201823128.png" alt="其中enter字符也被纳入计数"></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220308201849624.png"></p><p>还可以这样</p><p><img src="https://img-blog.csdnimg.cn/20201010161332689.png#pic_center"></p><p>或是这样</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201010161402919.png"><br>最后一种会更通用，因为它可以检测到其他失败原因，如磁盘故障<br>精简后为</p><p><img src="https://img-blog.csdnimg.cn/20201010162403986.png#pic_center"></p><h3 id="2-5-分支语句与逻辑运算符"><a href="#2-5-分支语句与逻辑运算符" class="headerlink" title="2.5 分支语句与逻辑运算符"></a>2.5 分支语句与逻辑运算符</h3><p>if and if…else结构<br>if… else if… else结构<br>逻辑运算符or&lt;=&gt;||<br>逻辑运算符AND&lt;=&gt;&amp;&amp;<br>逻辑运算符NOT&lt;=&gt;!</p><ul><li><p>?:运算符：条件运算符，它是C++中唯一需要3个操作数的运算符</p><p>  <strong>expression1 ? expression2 :expression3</strong><br>  如果expression1 为true，则整个条件表达式的值为expression2的值，否则整个表达式的值为expression3的值</p></li></ul><p><strong>switch语句</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">spectrum</span><span class="token punctuation">{</span>red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>blue<span class="token punctuation">,</span>green<span class="token punctuation">}</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> choice<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> red<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"is red"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> blue<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"is blue"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> green<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"is green"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no red blue green"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220309003342175.png"></p><p>switch和if else</p><ul><li>switch中case的值必须是整数（包括char），因此switch无法处理浮点数，如果是涉及取值范围、浮点测试或两个变量的比较，则应使用if else语句。</li><li>如果所有的选项都可以使用整数常量来标识，则可以优先使用switch语句，因为如果选项超过两个，则就代码长度和执行速度而言，switch语句的效率更高</li></ul><p><strong>break、continue、goto</strong></p><p>break：打破循环<br>continue：跳过该轮循环<br>goto↓</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">goto</span> zhoumouren<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> zhoumouren<span class="token operator">:</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-简单文本文件输入输出"><a href="#2-6-简单文本文件输入输出" class="headerlink" title="2.6 简单文本文件输入输出"></a>2.6 简单文本文件输入输出</h3><ul><li><p>写入到文本文件</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ofstream outfile<span class="token punctuation">;</span>outfile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"D:\\Learning\\C++_learning\\zhoumouren.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outfile <span class="token operator">&lt;&lt;</span> <span class="token string">"zhoumouren"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>outfile <span class="token operator">&lt;&lt;</span> <span class="token string">"666666"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>outfile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220309011923021.png"></p></li><li><p>读取文本文件</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ifstream infile<span class="token punctuation">;</span>infile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"D:\\Learning\\C++_learning\\zhoumouren.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string value<span class="token punctuation">;</span><span class="token comment">//inFile.eof():判断是否到达EOF</span><span class="token comment">//inFile.fail() :可以用于检查EOF和类型不匹配</span><span class="token comment">//inFile.good() :指出最后一次读取输入的操作是否成功</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>infile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>infile<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>infile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220309011845059.png"></p></li></ul><h3 id="2-7-string"><a href="#2-7-string" class="headerlink" title="2.7 string"></a>2.7 string</h3><p>string对象和字符数组之间的主要区别是可以将string对象声明为简单变量，而不是数组，且类设计能让程序自动处理string的大小，这使得与使用字符数组相比，使用string对象更方便，更安全。从理论上来说，可以将char数组视为一组用于存储一个字符串的char存储单元，而string类变量是一个表示字符串的实体。</p><p>string的赋值、拼接和附加</p><ul><li><p>赋值</p><p>  不能将一个数组赋给另一个数组，但可以将一个string对象赋给另一个string对象</p></li><li><p>拼接和附加</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string a <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>string b <span class="token operator">=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>string c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304165705146.png"></p></li></ul><p><strong>输出带引号的字符串</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\"aaa\""</span><span class="token punctuation">;</span> <span class="token comment">//第一种方式</span>cout <span class="token operator">&lt;&lt;</span> <span class="token raw-string string">R"("aaa")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//第二种方式</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304170137383.png"></p><p><strong>但是原始字符串中若有括号()，则需要使用另一种方式替代默认定界符“（和）”</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token raw-string string">R"+*(aaa "(bbb)" cccc)+*"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304170849987.png"></p><p><strong>字符串长度</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string a <span class="token operator">=</span> <span class="token string">"bbb"</span><span class="token punctuation">;</span><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"cc"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>endl <span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304171713523.png"></p><p><strong>string的输入方法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span><span class="token comment">//第一种</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-结构体"><a href="#2-8-结构体" class="headerlink" title="2.8 结构体"></a>2.8 结构体</h3><p>C++ OOP类的基石就是结构</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201006115129590.png"></p><p><strong>C++11结构初始化、赋值、结构声明、结构数组</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">oneman</span><span class="token punctuation">{</span>string name<span class="token punctuation">;</span><span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span>c<span class="token punctuation">;</span><span class="token comment">//结构声明</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>oneman a<span class="token punctuation">{</span> <span class="token string">"zhoumouren"</span><span class="token punctuation">,</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>oneman b<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//默认初始化</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//赋值</span>c <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//赋值</span>oneman d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token string">"zhou"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"mou"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//结构数组</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220304174036447.png"></p><h3 id="2-9-共用体"><a href="#2-9-共用体" class="headerlink" title="2.9 共用体"></a>2.9 共用体</h3><p>共用体union是一种数据格式，他能存储不同的数据类型，但只能同时存储其中一种类型。也就是说，结构可以同时存储int、long和double，共用体只能存储int、long或double,共用体占用的内存应足够存储共用体中最大的成员。共同体用途：当数据项使用两种或更多种格式时，可节省空间, 简单例子可以参考<a href="https://www.runoob.com/cprogramming/c-unions.html">C 共用体 | 菜鸟教程 (runoob.com)</a></p><h3 id="2-10-枚举"><a href="#2-10-枚举" class="headerlink" title="2.10 枚举"></a>2.10 枚举</h3><p>定义枚举类型的主要目的是：增加程序的可读性。枚举类型最常见也最有意义的用处之一就是用来描述状态量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">enum</span> <span class="token class-name">zhoumouren</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g<span class="token punctuation">,</span>h<span class="token punctuation">}</span><span class="token punctuation">;</span>zhoumouren zmr <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//不初始化也行</span>zmr <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//zmr = 2;not valid</span><span class="token comment">//zmr++;not valid</span><span class="token comment">//zmr = a+b;not valid</span><span class="token keyword">int</span> num <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token comment">//valid</span>zmr <span class="token operator">=</span> <span class="token function">zhoumouren</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//valid</span>zmr <span class="token operator">=</span> <span class="token function">zhoumouren</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//虽然有输出,但这么写不合适</span><span class="token keyword">enum</span> <span class="token class-name">bits</span><span class="token punctuation">{</span>one<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>two<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>four<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>eight<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//显示设置枚举量的值</span><span class="token keyword">enum</span> <span class="token class-name">bigstep</span><span class="token punctuation">{</span>first<span class="token punctuation">,</span>second<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>third<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//first在默认情况下为0,后面的third没被初始化,比前面的枚举量大1，为101</span><span class="token keyword">enum</span> <span class="token punctuation">{</span>zero<span class="token punctuation">,</span>null <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>one<span class="token punctuation">,</span>numero_uno<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//zero和null都为0,one和umero_uno都为1</span>cout <span class="token operator">&lt;&lt;</span> zmr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++早期版本中,只能将int值赋给枚举量,但是后来这种限制取消了,因此可以使用long甚至long long类型的值</p><p>枚举的取值范围:拿<code>bigstep</code>举例,最大值(最小值)都得看大于(小于)这个最大枚举量(最小枚举量)的2的幂,例如third为101,即看<code>2的七次方将它减去1就是这个枚举的上限127</code>.同理<code>下限一般为0</code>.若最小枚举量为-6,则把他看成正数6,操作和上面步骤一样最后再取个负号就是-7</p><p>一般选择多少空间来存储枚举由编译器决定,对于取值范围小的枚举使用一个字节或更少的空间,而对于包含long类型值的枚举,则使用4个字节</p><h3 id="2-11-指针"><a href="#2-11-指针" class="headerlink" title="2.11 指针"></a>2.11 指针</h3><ul><li><p>指针和自由存储空间</p><p>  指针策略是C++内存管理变成理念的核心</p><p>  <strong>指针和C++基本原理</strong></p><p>  C++编译过程:预处理、编译、汇编、链接成可执行文件(window下为.exe)</p><p>  OOP（Object Oriented Programming）编程与传统编程区别:OOP强调运行阶段而不是编译阶段。传统编译过程需要指定数组长度，如果要分配200个元素的空间，如果你只用到其中20个元素的空间，如果编译阶段进行决策那么就确定是需要200个元素的空间，如果你只用到其中20个元素的空间，这就是在浪费内存，所以OOP通过运行阶段决策可以灵活告诉程序只需要用到20个元素的空间。这里采用的方法是<code>使用关键字new请求正确数量的内存以及使用指针来跟踪新分配的内存的位置</code></p><ul><li>在运行阶段做决策并非OOP独有的，但使用C++编写这样的代码比C语言更简单</li><li>*运算符被称为间接值或解除引用运算符</li></ul>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> zmr <span class="token operator">=</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span><span class="token comment">//第一种初始化方法</span><span class="token keyword">int</span><span class="token operator">*</span> zt<span class="token punctuation">;</span>zt <span class="token operator">=</span> <span class="token operator">&amp;</span>value<span class="token punctuation">;</span><span class="token comment">//第二种初始化方法</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address:"</span> <span class="token operator">&lt;&lt;</span> zmr <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"value:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>zmr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address:"</span> <span class="token operator">&lt;&lt;</span> zt <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"value:"</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>zt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>指针的危险</strong></p><p>  ​    <code>*pointer_values=3333;</code></p><p>  没有表明地址，指针不一定指向存储3333的地址，这种错误会导致一些最隐匿、最难以跟踪的bug，所以程序会报出异常。</p><p>  指针和数字</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pointer_updates <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0xB8000000</span><span class="token punctuation">;</span><span class="token comment">//第一种</span><span class="token comment">//pointer_updates = 0xB8000000;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  C99标准发布之前，第二种C语言是允许这样赋值，但C++会有异常，因为C++类型一致方面要求比较严格，应通过强制转换类型将数字转换为适当的地址类型（第一种）</p><p>  <strong>使用new来分配内存</strong></p><p>  指针真正的用武之地是可以在运行阶段分配未命名的内存以存储值</p><p>  new int告诉程序，需要适合存储int的内存。new运算符根据类型来确定需要多少字节的内存。然后它找到这样的内存，并返回其地址</p><ul><li>对于指针需要指出的另一点是：<strong>new分配的内存块</strong>通常与<strong>常规变量声明分配的内存块</strong>不同，像values这些的值都存储在栈（stack）的内存区域中，而new在被称为堆（heap）或自由存储区（free store）的内存区域分配内存</li><li>计算机可能会由于没有足够的内存而无法满足new的请求。C++提供了检测并处理内存分配失败的工具</li></ul><p>  <strong>使用delete释放内存</strong></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>new_pointer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token operator">*</span>new_pointer <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token keyword">delete</span> new_pointer<span class="token punctuation">;</span><span class="token comment">//仅仅释放new_pointer指向的内存，但不会删除指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  需要注意的是一定要配对的使用new和delete；不然可能发生内存泄漏（memory leak），被分配的内存再也无法使用了，如果内存泄漏严重，程序会因不断寻找更多内存而终止。</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span> new_pointer<span class="token punctuation">;</span><span class="token keyword">delete</span> new_pointer<span class="token punctuation">;</span><span class="token comment">//not valid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  delete只能释放使用new分配内存</p><p>  <strong>使用new来创建动态数组，使用delete[]来删除动态数组</strong></p><p>  在编译时给数组分配内存被称为<strong>静态联编</strong>（static binding），意味着数组是在编译时加入到程序中的。但使用new时，如果在运行阶段需要数组，则创建它；如果不需要，则不创建，还可以在程序运行时选择数组的长度。这被称为<strong>动态联编</strong>（dynamic binding）</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token operator">*</span> new_pointer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建一个包含10个int元素的数组</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>new_pointer<span class="token punctuation">;</span><span class="token comment">//动态删除数组</span><span class="token keyword">int</span><span class="token operator">*</span> ze<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">delete</span> ze<span class="token punctuation">;</span><span class="token comment">//对空指针应用delete是安全的</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>使用动态数组</strong></p><p>  *(new_pointer+1)等价于new_pointer[1]，相邻的int地址通常相差2个字节或4个字节，所以说指针算术是一个神奇的东西，比如*new_pointer指向一个数组</p><p>  <code>    int old_array[3]={10,2,3};</code></p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201007230134651.png"></p><p>  <strong>指针和字符串</strong></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token string">"aaa"</span><span class="token punctuation">;</span><span class="token comment">//字符串内存地址" "</span>cout <span class="token operator">&lt;&lt;</span> p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出字符串</span>cout <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//输出字符串地址</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>独立副本</strong></p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> animal<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> q<span class="token punctuation">;</span>q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>q <span class="token operator">=</span> animal<span class="token punctuation">;</span><span class="token comment">//第一种，修改存储p的地址，使其指向animal</span><span class="token function">strcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> animal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种，第一个参数表示目标地址</span><span class="token comment">//所以分配了目标地址，p和animal互为独立的副本</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>animal <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>q <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <strong>自动存储、静态存储、动态存储</strong></p><p>  <strong>自动存储</strong></p><p>  函数内部定义的常规变量使用自动存储空间，被称为自动变量。在所属函数被调用时自动产生，在该函数结束时消亡</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">" at"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>name<span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">" at"</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>name<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter last name:"</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> temp<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> pn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">strcpy_s</span><span class="token punctuation">(</span>pn<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> pn<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220307180012705.png"></p></li></ul><p>从上图看，其实C++不保证新释放的内存就是下一次使用new时选择的内存，自动变量通常存储在栈中</p><p><strong>静态存储</strong></p><p>静态存储是整个程序执行期间都存在的存储方式。使变量成为静态的方式有两种：一种是在函数外面定义这个变量，另一种是在声明变量时使用关键字static</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201008102156738.png"></p><p>自动存储和静态存储的关键在于：这些方法严格的限制了变量的寿命<br>变量可能存在于程序的整个生命周期（静态变量），也可能只是在特定函数被执行时存在（自动变量）</p><p><strong>动态存储</strong></p><p>new和delete运算符提供了一种比自动变量和静态变量更灵活的方法。他们可以管理一个内存池，这在C++中被称为自由存储区（free store）或堆（heap）。new和delete让你能够在一个函数中分配内存，而在另一个函数释放它，因此数据的生命周期不完全受程序或函数的生存时间控制。使用new和delete让程序员对程序如何使用内存有更大的控制权。</p><p><strong>类型组合</strong></p><p>数组+结构+指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">oneman</span><span class="token punctuation">{</span><span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>oneman a<span class="token punctuation">;</span>oneman<span class="token operator">*</span> aa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>aa<span class="token operator">-&gt;</span>year <span class="token operator">=</span> <span class="token number">1999</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>aa<span class="token punctuation">)</span><span class="token punctuation">.</span>year <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>oneman b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>year <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220307201239288.png"></p><p><strong>指针和const</strong></p><p>可以使用两种不同的方式将const关键字用于指针</p><ul><li>让指针指向一个常量对象，防止使用该指针来修改所指向的值<strong>（值不变）</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pointer <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>pointer<span class="token punctuation">;</span><span class="token comment">//*pt = 30;这样是错误的，不能动指针</span>pointer <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310152419990.png"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pointer <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>pointer<span class="token punctuation">;</span>pointer <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>pt <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310152543512.png"></p><p>​    不能像以下这么赋值</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201013212824682.png"></p><p>​    可以将const变量的地址赋给指向const的指针，但不能将const的地址赋给常规指针</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/2020101409003777.png"></p><p>C++禁止这种行为，其实原因很简单，如果可以将nocon的地址赋给q，则可以用q来修改nocon的值，这使得nocon的const状态很荒谬，因此C++禁止将const的地址赋给非const指针，但是可以使用强制类型转换来突破这种限制</p><ul><li>将指针本身声明为常量，这样可以防止改变指针指向的位置<strong>（地址不变）</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> pointer <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> pt <span class="token operator">=</span> <span class="token operator">&amp;</span>pointer<span class="token punctuation">;</span><span class="token operator">*</span>pt <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment">/*    int p = 15;    pt = &amp;p;    invalid     */</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310153141930.png"></p><p><strong>将指针参数声明为指向常量数据的指针有两条理由</strong>：<br>1.这样可以避免由于无意间修改数据而导致的编程错误<br>2.使用const使得函数能够处理const和非const实参，否则将只能接受非const数据<br>如果条件允许，则应将指针形参声明为指向const的指针</p><h3 id="2-12-函数"><a href="#2-12-函数" class="headerlink" title="2.12 函数"></a>2.12 函数</h3><p>解决经典<strong>按值传递</strong>的例子</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token operator">*</span>x <span class="token operator">=</span> <span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token operator">*</span>y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数和二维数组</p><p><strong>函数原型定义</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>ar2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第一种指针参数的声明表示由4个指向int的指针组成的数组</strong>，而不是由一个指向由4个int组成的数组的指针;第二种格式和第一种原型的含义完全相同，但可读性更强</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201014104908289.png"></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201014105812628.png"></p><p><strong>函数与array对象</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Seasons <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">const</span> array<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span> Snames <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Spring"</span><span class="token punctuation">,</span><span class="token string">"Summer"</span><span class="token punctuation">,</span><span class="token string">"Fall"</span><span class="token punctuation">,</span><span class="token string">"Winter"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span><span class="token operator">*</span> pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span> da<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span> expenses<span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>expenses<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show</span><span class="token punctuation">(</span>expenses<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span><span class="token operator">*</span> pa<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Seasons<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter:"</span> <span class="token operator">&lt;&lt;</span> Snames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"expenses:"</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> Seasons<span class="token operator">&gt;</span> da<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\nEXPENSES\n"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Seasons<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> Snames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">":$"</span> <span class="token operator">&lt;&lt;</span> da<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>total <span class="token operator">+=</span> da<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Total Expenses:$"</span> <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310160432370.png"></p><p><strong>递归</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">countdown</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">countdown</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Counting down..."</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">countdown</span><span class="token punctuation">(</span>n<span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">":Kaboom! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以把它理解成函数栈，递归中countdown(0)是栈顶先弹出，以此类推</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310161042805.png"></p><p><strong>递归-分治法</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Len <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Divs <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">subdivide</span><span class="token punctuation">(</span><span class="token keyword">char</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> ruler<span class="token punctuation">[</span>Len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>ruler<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>ruler<span class="token punctuation">[</span>Len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> Len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ruler<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> ruler<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'|'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ruler <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Divs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">subdivide</span><span class="token punctuation">(</span>ruler<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ruler <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>ruler<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">subdivide</span><span class="token punctuation">(</span><span class="token keyword">char</span> ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>ar<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'|'</span><span class="token punctuation">;</span><span class="token function">subdivide</span><span class="token punctuation">(</span>ar<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subdivide</span><span class="token punctuation">(</span>ar<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">,</span> level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310162653952.png"></p><p><strong>函数指针</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(*pf)是函数，pf是函数指针，表示pf是一个指向函数的指针</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token function">pf</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//而他表示pf是一个返回指针的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>正确声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">pam</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> pam<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>错误声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">ned</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">ted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pf <span class="token operator">=</span> ned<span class="token punctuation">;</span><span class="token comment">//invalid</span>pf <span class="token operator">=</span> ted<span class="token punctuation">;</span><span class="token comment">//invalid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数指针示例</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/2020101710540921.png"></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/2020101710543839.png"></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310163703383.png"></p><p><strong>深入探讨函数指针</strong></p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201017105956894.png"></p><p>这些函数的特征标看似不同，但实际上相同</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201017110603216.png"></p><p>使用C++的自动类型推断功能时，代码要简单的多</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> p2 <span class="token operator">=</span> f2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以声明包含三个函数指针的数组</p><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/20201017110954639.png"></p><p>依然可以使用auto</p><p><strong>内联函数</strong></p><p>内联函数是C++为<strong>提高程序运行速度</strong>所做的一项改进。C++内联函数的编译代码与其他程序代码“内联”起来了。也就是说，编译器将使用相应的函数代码替换函数调用。对于内联代码，程序无需跳到另一个位置处执行代码，再跳回来。因此，内联函数的运行速度比常规函数稍快，但<strong>代价是需要占用更多的内存</strong>，如果程序在10个不同的地方调用同一个内联函数，则该程序将包含该函数代码的10个副本</p><p>要使用这项特性，必须采取下述措施：</p><ul><li>在函数声明前加上关键字inline；</li><li>在函数定义前加上关键字inline。</li></ul><p>程序员请求将函数作为内联函数时，编译器不一定会满足这种要求。它可能认为该函数过大或注意到函数调用了自己（内联函数不能递归），因此不能将其作为内联函数；而有些编译器没有启用或实现这种特性。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310165907259.png"></p><h3 id="2-13-引用"><a href="#2-13-引用" class="headerlink" title="2.13 引用"></a>2.13 引用</h3><p>引用变量</p><p>C和C++使用&amp;符号来指示变量的地址。C++给&amp;符号赋予了另一个含义，将其用来声明引用。例如rodents作为rats变量的别名</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> rats<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>rodents <span class="token operator">=</span> rats<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里&amp;不是地址运算符,int&amp;指的是指向int的引用，上述引用声明允许将rats和rodents互换-他们指向相同的值和内存单元</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> rats <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> rodents <span class="token operator">=</span> rats<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>rats<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rodents <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>rodents<span class="token operator">++</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>rodents <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310171957752.png"></p><p>引用看起来很像指针，但除了表示不同，还有就是必须是声明引用时，将其初始化，而不像指针那样，可以先声明在赋值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> rat<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>rodent<span class="token punctuation">;</span><span class="token comment">//invalid</span>rodent <span class="token operator">=</span> rat<span class="token punctuation">;</span><span class="token comment">//invalid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>引用更接近const指针，必须在创建时进行初始化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;</span>rodents <span class="token operator">=</span> rat<span class="token comment">//实际上是下述代码的伪装表示</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> pr <span class="token operator">=</span> <span class="token operator">&amp;</span>rats<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> rats <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> rodents <span class="token operator">=</span> rats<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>rats<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rodents <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> mouse <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>rats <span class="token operator">=</span> mouse<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>mouse <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>rodents <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> rats <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310173334449.png"></p><p>值变了，但rodents地址和mouse不相同</p><p><strong>将引用用作函数参数</strong></p><p>这种传递参数的方法称为引用传递按引用传递。允许被调用的函数能够访问调用函数中的变量。C++新增的这项特性是对<strong>C语言的超越</strong>，C语言只能按值传递，按值传递导致被调用函数使用调用程序的值的拷贝。当然C语言也允许避开按值传递的限制，采用按指针传递的方式</p><p>依旧是以<strong>交换两个变量</strong>的值做例子</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> temp<span class="token punctuation">;</span>temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310175256100.png"></p><p><strong>左值</strong>：左值参数是可被引用的数据对象，例如，变量、数组元素、结构成员、引用和解除引用的指针都是左值。在C语言中，左值最初指的是可出现在赋值语句左边的实体，但这是引入关键字const之前的情况。现在常规变量和const变量都可被视为左值，因为可通过地址访问它们。但常规变量属于可修改的左值，而const变量属于不可修改的左值</p><p><strong>应尽可能使用const</strong><br>将引用参数声明为常数数据的引用的理由有三个：<br>⭐ 使用const可以避免无意中修改数据的编程错误<br>⭐ 使用const使函数能够处理const 和 非 const 实参，否则将只能接受非const数据<br>⭐ 使用const 引用使函数能够正确生成并使用临时变量</p><p>C++11新增了另一种引用-右值引用(rvalue reference).这种引用可指向右值，是使用&amp;&amp;声明的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">double</span>  <span class="token operator">&amp;&amp;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220310181325457.png"></p><p>新增右值引用的主要目的是，让库设计人员能够提供有些操作的更有效的实现</p><p>将引用用于结构</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">free_throws</span><span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> made<span class="token punctuation">;</span>    <span class="token keyword">int</span> attempts<span class="token punctuation">;</span>    <span class="token keyword">float</span> percent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">const</span> free_throws<span class="token operator">&amp;</span> ft<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">set_pc</span><span class="token punctuation">(</span>free_throws<span class="token operator">&amp;</span> ft<span class="token punctuation">)</span><span class="token punctuation">;</span>free_throws<span class="token operator">&amp;</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>free_throws<span class="token operator">&amp;</span> target<span class="token punctuation">,</span> <span class="token keyword">const</span> free_throws<span class="token operator">&amp;</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    free_throws one <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"zhoumouren"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws two <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"caimouren "</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws three <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Minnie Max"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws four <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"whily Looper"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws five <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Long long"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws team <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Throwgood"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    free_throws dup<span class="token punctuation">;</span>    <span class="token function">set_pc</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">accumulate</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span> two<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span><span class="token function">accumulate</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span> three<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    dup <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>team<span class="token punctuation">,</span> five<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Displaying team:\n"</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Displaying dup after assignment:\n"</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>dup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">set_pc</span><span class="token punctuation">(</span>four<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">accumulate</span><span class="token punctuation">(</span>dup<span class="token punctuation">,</span> five<span class="token punctuation">)</span> <span class="token operator">=</span> four<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Displaying dup after ill-advised assignment:\n"</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>dup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">const</span> free_throws<span class="token operator">&amp;</span> ft<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Name: "</span> <span class="token operator">&lt;&lt;</span> ft<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" Made:"</span> <span class="token operator">&lt;&lt;</span> ft<span class="token punctuation">.</span>made <span class="token operator">&lt;&lt;</span> <span class="token char">'\t'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Attempts:"</span> <span class="token operator">&lt;&lt;</span> ft<span class="token punctuation">.</span>attempts <span class="token operator">&lt;&lt;</span> <span class="token char">'\t'</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Percent"</span> <span class="token operator">&lt;&lt;</span> ft<span class="token punctuation">.</span>percent <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">set_pc</span><span class="token punctuation">(</span>free_throws<span class="token operator">&amp;</span> ft<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ft<span class="token punctuation">.</span>attempts <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        ft<span class="token punctuation">.</span>percent <span class="token operator">=</span> <span class="token number">100.0f</span> <span class="token operator">*</span> <span class="token keyword">float</span><span class="token punctuation">(</span>ft<span class="token punctuation">.</span>made<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span>ft<span class="token punctuation">.</span>attempts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        ft<span class="token punctuation">.</span>percent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>free_throws<span class="token operator">&amp;</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>free_throws<span class="token operator">&amp;</span> target<span class="token punctuation">,</span> <span class="token keyword">const</span> free_throws<span class="token operator">&amp;</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    target<span class="token punctuation">.</span>attempts <span class="token operator">+=</span> source<span class="token punctuation">.</span>attempts<span class="token punctuation">;</span>    target<span class="token punctuation">.</span>made <span class="token operator">+=</span> source<span class="token punctuation">.</span>made<span class="token punctuation">;</span>    <span class="token function">set_pc</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为何要返回引用</p><p>先看下面一段代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> m <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">25.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在第一条语句中，值4.0被复制到一个临时位置，然后被复制给m。第二条语句，值5.0被复制到一个临时位置，然后传递给<strong>cout</strong></p><p>z艾拉</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++98 </tag>
            
            <tag> C++11 </tag>
            
            <tag> c++14 </tag>
            
            <tag> C++17 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo个人博客搭建笔记</title>
      <link href="/2022/02/25/hexo/"/>
      <url>/2022/02/25/hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>使用基于hexo框架的github pages/gitee pages服务搭建博客的好处:</p><ul><li>全是静态文件,访问速度快</li><li>免费,托管在github和gitee不需要后台</li><li>数据安全</li><li>网站内容容易打包、迁移</li></ul><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><ul><li>拥有github账户<ul><li>新建一个<code>username.github.io</code>的仓库，username是你的用户名</li></ul></li><li>安装node.js <a href="http://nodejs.cn/download/">node.js</a> 下载最新版本即可</li><li>安装git <a href="https://git-scm.com/">git</a> 下载最新版本即可</li></ul><h2 id="3-配置SSH密钥"><a href="#3-配置SSH密钥" class="headerlink" title="3. 配置SSH密钥"></a>3. 配置SSH密钥</h2><ul><li><p>打开github进入到setting找到SSH and GPG keys一栏</p><p>  <img src="https://s3.bmp.ovh/imgs/2022/02/48bd081222b0057a.jpg"></p></li><li><p>点进去点击New SSH key 可以看到如下图所示</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/SSH-2.jpg"></p></li><li><p>然后生成本地密钥,找到<code>.ssh\id_rsa.pub </code> 复制其中的内容到key 添加成功后(其中title随便填)</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>此时git连接github/gitee 需要配置登录信息,以后就可以不用再配置了</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"用户名"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"邮箱"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="4-Hexo"><a href="#4-Hexo" class="headerlink" title="4. Hexo"></a>4. Hexo</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages/Gitee Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题</p><h3 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h3><p>安装的位置可以自己选择</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-初始化"><a href="#4-3-初始化" class="headerlink" title="4.3 初始化"></a>4.3 初始化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-4-生成并启动"><a href="#4-4-生成并启动" class="headerlink" title="4.4 生成并启动"></a>4.4 生成并启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g <span class="token comment">#生成</span>$ hexo s <span class="token comment">#启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时能看到如图所示(这里一开始是默认主题,比较简陋):<img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/hexo-s.jpg"></p><h3 id="4-5-部署到托管平台上"><a href="#4-5-部署到托管平台上" class="headerlink" title="4.5 部署到托管平台上"></a>4.5 部署到托管平台上</h3><ul><li><p>部署到github pages上，需要在站点配置文件_config.yml中配置：</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/master.png"></p></li><li><p>同时部署到gitee pages和github pages上，需要在站点配置文件_config.yml中配置：</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301172914182.png">   </p></li><li><p>返回git bash上开始部署</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean$ hexo g$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>如果部署成功的话你将能看到<code>你的用户名.github.io</code>上网页内容有更新<br>但是github国内访问部署有时候偏慢,这里可以考虑gitee,流程变通一下即可</p><h2 id="5-主题"><a href="#5-主题" class="headerlink" title="5.主题"></a>5.主题</h2><p>目前比较多人用的主题在github有next、butterfly等等,这两个主题都有比较具体的说明文档，在这里就不再介绍<br><a href="https://github.com/iissnan/hexo-theme-next">next主题文档说明</a><br><a href="https://butterfly.js.org/posts/21cfbf15/">butterfly主题文档说明</a><br><a href="https://github.com/blinkfox/hexo-theme-matery">matery主题文档说明</a><br>也可以自己寻找适合自己审美的主题，这些文档说明基本可以满足网页设计的基本需求</p><h2 id="6-其他补充"><a href="#6-其他补充" class="headerlink" title="6.其他补充"></a>6.其他补充</h2><h3 id="6-1-优质视频"><a href="#6-1-优质视频" class="headerlink" title="6.1 优质视频"></a>6.1 优质视频</h3><p>这里贴出两个不错并且适合萌新的视频：<br><a href="https://www.bilibili.com/video/BV1cv411N7kz?p=1">Hexo还是Hugo？Typecho还是Wordpress？</a><br><a href="https://www.bilibili.com/video/BV16W411t7mq?spm_id_from=333.788.top_right_bar_window_default_collection.content.click">使用Hexo博客搭建的个人博客，使用Next主题来进行优化改造</a></p><h3 id="6-2-好用的壁纸库"><a href="#6-2-好用的壁纸库" class="headerlink" title="6.2 好用的壁纸库"></a>6.2 好用的壁纸库</h3><p><a href="https://wallhaven.cc/">Awesome Wallpapers - wallhaven.cc</a></p><h3 id="6-3-好用的favicon网站"><a href="#6-3-好用的favicon网站" class="headerlink" title="6.3 好用的favicon网站"></a>6.3 好用的favicon网站</h3><p><a href="https://favicon.io/">The best Favicon Generator (completely free) - favicon.io</a></p><h3 id="6-4-绑定腾讯云域名"><a href="#6-4-绑定腾讯云域名" class="headerlink" title="6.4 绑定腾讯云域名"></a>6.4 绑定腾讯云域名</h3><p>目前gitee自定义域名要收费，要开通gitee pages pro，所以这里只介绍了基于github的域名解析：</p><ul><li>买了域名后在腾讯云控制台域名解析处将信息填好，记录类型A那里的记录值通过ping自己要解析的网站得到IP填入即可</li></ul><p><img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301175838855.png"></p><ul><li><p>之后在./主题配置文件所在目录/source下创建一个不带后缀的CNAME文件，里面填写你买的的域名</p></li><li><p>部署到github上后打开setting将域名填入custom domain</p><p>  <img src="https://gitee.com/zhouzejiang/blogimage/raw/master/img/image-20220301180516848.png"></p></li><li><p>等到github pages更新后域名解析完毕</p></li></ul><h3 id="6-5-访问速度优化"><a href="#6-5-访问速度优化" class="headerlink" title="6.5 访问速度优化"></a>6.5 访问速度优化</h3><p>访问速度优化无非就是图片加载优化、代码压缩优化、全站CDN加速</p><p>这个可以参考大佬的文章：    <a href="https://blog.sky03.cn/posts/42790.html">Hexo进阶之各种优化 | Sky03我的薰衣草</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> node.js </tag>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
